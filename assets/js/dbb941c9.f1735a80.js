"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[8210],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,f=d["".concat(s,".").concat(u)]||d[u]||_[u]||c;return t?a.createElement(f,o(o({ref:n},l),{},{components:t})):a.createElement(f,o({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,o=new Array(c);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<c;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>_,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const c={title:"ZCL_A_ABAP_SWITCH_PLANETYPE",description:"Action: Flugtyp wechseln"},o=void 0,i={unversionedId:"apmf/code/classes/zcl_a_abap_switch_planetype",id:"apmf/code/classes/zcl_a_abap_switch_planetype",title:"ZCL_A_ABAP_SWITCH_PLANETYPE",description:"Action: Flugtyp wechseln",source:"@site/docs/apmf/code/classes/zcl_a_abap_switch_planetype.md",sourceDirName:"apmf/code/classes",slug:"/apmf/code/classes/zcl_a_abap_switch_planetype",permalink:"/s4hana/docs/apmf/code/classes/zcl_a_abap_switch_planetype",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/apmf/code/classes/zcl_a_abap_switch_planetype.md",tags:[],version:"current",frontMatter:{title:"ZCL_A_ABAP_SWITCH_PLANETYPE",description:"Action: Flugtyp wechseln"},sidebar:"apmfSidebar",previous:{title:"Klassen",permalink:"/s4hana/docs/apmf/code/classes/"},next:{title:"ZCL_D_ABAP_LOCATIONS",permalink:"/s4hana/docs/apmf/code/classes/zcl_d_abap_locations"}},s={},p=[],l={toc:p};function _(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap"},'\u2026    \n    DATA connections TYPE ztiabap_connectiontp.\n\n    "Daten lesen\n    io_read->retrieve(\n      EXPORTING\n        iv_node       = is_ctx-node_key\n        it_key        = it_key\n      IMPORTING\n        eo_message    = eo_message\n        et_data       = connections\n        et_failed_key = et_failed_key ).\n\n    "Nachrichten-Container erstellen\n    IF eo_message IS NOT BOUND.\n      eo_message = /bobf/cl_frw_factory=>get_message( ).\n    ENDIF.\n\n    "Daten sequentiell durchlaufen\n    LOOP AT connections REFERENCE INTO DATA(connection).\n      "Daten \xe4ndern und zur\xfcckschreiben\n      connection->flighttype = \'X\'.\n      io_modify->update(\n        EXPORTING\n          iv_node = is_ctx-node_key\n          iv_key  = connection->key\n          is_data = connection ).\n      "Meldung erzeugen\n      message = NEW zcm_abap_connection(\n        textid          = zcm_abap_connection=>switch_flight_type_successfully\n        severity        = zcm_abap_connection=>co_severity_success\n        i_carrier_id    = connection->carrierid\n        i_connection_id = connection->connectionid ).\n      eo_message->add_cm( message ).\n    ENDLOOP.\n\u2026\n')))}_.isMDXComponent=!0}}]);