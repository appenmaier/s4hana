"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[662],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=c(t),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||s;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=b;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},5018:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const s={title:"ABAP-Objects-06",description:""},i=void 0,l={unversionedId:"exercises/abap-objects/abap-objects-06",id:"exercises/abap-objects/abap-objects-06",title:"ABAP-Objects-06",description:"",source:"@site/docs/exercises/abap-objects/abap-objects-06.md",sourceDirName:"exercises/abap-objects",slug:"/exercises/abap-objects/abap-objects-06",permalink:"/s4hana/exercises/abap-objects/abap-objects-06",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/exercises/abap-objects/abap-objects-06.md",tags:[],version:"current",frontMatter:{title:"ABAP-Objects-06",description:""},sidebar:"exercisesSidebar",previous:{title:"ABAP-Objects-05",permalink:"/s4hana/exercises/abap-objects/abap-objects-05"},next:{title:"ABAP-Objects-07",permalink:"/s4hana/exercises/abap-objects/abap-objects-07"}},o={},c=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Hinweise zur Klasse <code>ZCL_???_CARGO_PLANE</code> und zur Klasse <code>ZCL_???_PASSENGER_PLANE</code>",id:"hinweise-zur-klasse-zcl__cargo_plane-und-zur-klasse-zcl__passenger_plane",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Erstelle die Klassen ",(0,a.kt)("inlineCode",{parentName:"li"},"ZCL_???_PASSENGER_PLANE")," und ",(0,a.kt)("inlineCode",{parentName:"li"},"ZCL_???_CARGO_PLANE")," anhand des abgebildeten Klassendiagramms"),(0,a.kt)("li",{parentName:"ol"},"Passe das ABAP-Programm ",(0,a.kt)("inlineCode",{parentName:"li"},"Z???_MAIN_AIRPLANES")," so an, dass statt gew\xf6hnlichen Flugzeugen Passagier- und Frachtflugzeuge erzeugt werden")),(0,a.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,a.kt)("mermaid",{value:"classDiagram\n    cl_airplane <|-- cl_passenger_plane\n    cl_airplane <|-- cl_cargo_plane\n\n    class cl_airplane {\n      +name: string &#123read-only&#125\n      +plane_type: string &#123read-only&#125\n      +number_of_airplanes: i &#123read-only, static&#125\n      +constructor(name: string, plane_type: string)\n      +to_string() string\n    }\n\n    class cl_passenger_plane {\n      +number_of_seats: i &#123read-only&#125\n      +constructor(name: string, plane_type: string, number_of_seats: i)\n      +to_string() string\n    }\n\n    class cl_cargo_plane {\n      +cargo_in_tons: i &#123read-only&#125\n      +constructor(name: string, plane_type: string, cargo_in_tons: i)\n      +to_string() string\n    }"}),(0,a.kt)("h2",{id:"hinweise-zur-klasse-zcl__cargo_plane-und-zur-klasse-zcl__passenger_plane"},"Hinweise zur Klasse ",(0,a.kt)("inlineCode",{parentName:"h2"},"ZCL_???_CARGO_PLANE")," und zur Klasse ",(0,a.kt)("inlineCode",{parentName:"h2"},"ZCL_???_PASSENGER_PLANE")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"STRING TO_STRING()")," soll alle Instanzattribute zu einer Zeichenkette zusammenfassen und diese zur\xfcckgeben")))}u.isMDXComponent=!0}}]);