"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[5796],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,u=d["".concat(s,".").concat(f)]||d[f]||_[f]||o;return t?r.createElement(u,c(c({ref:n},p),{},{components:t})):r.createElement(u,c({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>_,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={title:"ZCL_V_ABAP_AIRPORTS",description:"Validierung: Ziel- und Startflughafen"},c=void 0,i={unversionedId:"apmf/code/classes/zcl_v_abap_airports",id:"apmf/code/classes/zcl_v_abap_airports",title:"ZCL_V_ABAP_AIRPORTS",description:"Validierung: Ziel- und Startflughafen",source:"@site/docs/apmf/code/classes/zcl_v_abap_airports.md",sourceDirName:"apmf/code/classes",slug:"/apmf/code/classes/zcl_v_abap_airports",permalink:"/s4hana/docs/apmf/code/classes/zcl_v_abap_airports",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/apmf/code/classes/zcl_v_abap_airports.md",tags:[],version:"current",frontMatter:{title:"ZCL_V_ABAP_AIRPORTS",description:"Validierung: Ziel- und Startflughafen"},sidebar:"apmfSidebar",previous:{title:"ZCL_D_ABAP_LOCATIONS",permalink:"/s4hana/docs/apmf/code/classes/zcl_d_abap_locations"},next:{title:"ZCM_ABAP_CONNECTION",permalink:"/s4hana/docs/apmf/code/classes/zcm_abap_connection"}},s={},l=[],p={toc:l};function _(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-abap"},'CLASS zcl_v_abap_airports DEFINITION PUBLIC INHERITING FROM /bobf/cl_lib_v_supercl_simple FINAL CREATE PUBLIC.\n  PUBLIC SECTION.\n    METHODS /bobf/if_frw_validation~execute REDEFINITION.\n  PROTECTED SECTION.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zcl_v_abap_airports IMPLEMENTATION.\n\n  METHOD /bobf/if_frw_validation~execute.\n   \n    DATA connections TYPE ztiabap_connectiontp.\n\n    "Daten lesen\n    io_read->retrieve(\n      EXPORTING\n        iv_node       = is_ctx-node_key\n        it_key        = it_key\n      IMPORTING\n        eo_message    = eo_message\n        et_data       = connections\n        et_failed_key = et_failed_key ).\n\n    "Nachrichten-Container erstellen\n    IF eo_message IS NOT BOUND.\n      eo_message = /bobf/cl_frw_factory=>get_message( ).\n    ENDIF.\n\n    "Daten sequentiell durchlaufen\n    LOOP AT connections REFERENCE INTO DATA(connection).\n      "Daten pr\xfcfen\n      IF connection->departureairportid = connection->arrivalairportid.\n        "Meldung erzeugen\n        DATA(message) = NEW zcm_abap_connection(\n          textid          = zcm_abap_connection=>identical_airport_ids\n          severity        = zcm_abap_connection=>co_severity_error\n          i_carrier_id    = connection->carrierid\n          i_connection_id = connection->connectionid ).\n        eo_message->add_cm( message ).\n\n        et_failed_key = VALUE #( BASE et_failed_key ( key = connection->key ) ).\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n\n  ENDMETHOD.\n  \nENDCLASS.\n')))}_.isMDXComponent=!0}}]);