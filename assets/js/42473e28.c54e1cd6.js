"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[8434],{3905:(e,t,n)=>{n.d(t,{Zo:()=>T,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),E=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},T=function(e){var t=E(e.components);return a.createElement(i.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,T=o(e,["components","mdxType","originalType","parentName"]),c=E(n),v=r,m=c["".concat(i,".").concat(v)]||c[v]||O[v]||l;return n?a.createElement(m,s(s({ref:t},T),{},{components:n})):a.createElement(m,s({ref:t},T))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var E=2;E<l;E++)s[E]=n[E];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5333:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>O,frontMatter:()=>l,metadata:()=>o,toc:()=>E});var a=n(7462),r=(n(7294),n(3905));const l={title:"17. Berechtigungspr\xfcfungen implementieren",description:"",sidebar_position:170},s=void 0,o={unversionedId:"rap-cookbook/implement-authority-checks",id:"rap-cookbook/implement-authority-checks",title:"17. Berechtigungspr\xfcfungen implementieren",description:"",source:"@site/docs/rap-cookbook/implement-authority-checks.md",sourceDirName:"rap-cookbook",slug:"/rap-cookbook/implement-authority-checks",permalink:"/s4hana/rap-cookbook/implement-authority-checks",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/rap-cookbook/implement-authority-checks.md",tags:[],version:"current",sidebarPosition:170,frontMatter:{title:"17. Berechtigungspr\xfcfungen implementieren",description:"",sidebar_position:170},sidebar:"rapCookbookSidebar",previous:{title:"16. Aktionen mit Parametern implementieren",permalink:"/s4hana/rap-cookbook/implement-actions-with-parameters"},next:{title:"X. Entwurfs-Funktionen implementieren",permalink:"/s4hana/rap-cookbook/implement-draft-capabilities"}},i={},E=[{value:"Access Control <code>ZC_TRAVEL</code>",id:"access-control-zc_travel",level:2},{value:"Verhaltensimplementierung <code>ZBP_TRAVEL</code>",id:"verhaltensimplementierung-zbp_travel",level:2},{value:"Global Class <code>ZBP_TRAVEL</code>",id:"global-class-zbp_travel",level:3},{value:"Local Type <code>LHC_TRAVEL</code>",id:"local-type-lhc_travel",level:3}],T={toc:E};function O(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die Access Control ",(0,r.kt)("inlineCode",{parentName:"li"},"ZC_TRAVEL")," erstellen"),(0,r.kt)("li",{parentName:"ul"},"Die Behandlermethode zur Berechtigungspr\xfcfung implementieren")),(0,r.kt)("h2",{id:"access-control-zc_travel"},"Access Control ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZC_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"//highlight-start\n@EndUserText.label: 'Role for ZC_Travel'\n@MappingRole: true\ndefine role ZC_TRAVEL {\n grant select on ZC_Travel where (Country) = aspect pfcg_auth(/DMO/TRVL, COUNTRY, ACTVT = '03');\n}\n//highlight-end\n")),(0,r.kt)("h2",{id:"verhaltensimplementierung-zbp_travel"},"Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZBP_TRAVEL")),(0,r.kt)("h3",{id:"global-class-zbp_travel"},"Global Class ",(0,r.kt)("inlineCode",{parentName:"h3"},"ZBP_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" showLineNumbers',title:'"ZBP_TRAVEL.abap"',showLineNumbers:!0},"CLASS zbp_travel DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_travel.\n  PROTECTED SECTION.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zbp_travel IMPLEMENTATION.\nENDCLASS.\n")),(0,r.kt)("h3",{id:"local-type-lhc_travel"},"Local Type ",(0,r.kt)("inlineCode",{parentName:"h3"},"LHC_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" shwoLineNumbers',title:'"ZBP_TRAVEL.abap"',shwoLineNumbers:!0},'CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.\n  PRIVATE SECTION.\n    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION\n      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.\n\n    METHODS showtestmessage FOR MODIFY\n      IMPORTING keys FOR ACTION travel~showtestmessage.\n\n    METHODS validateagency FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validateagency.\n\n    METHODS validatecustomer FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validatecustomer.\n\n    METHODS validatedates FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validatedates.\n\n    METHODS determinestatus FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determinestatus.\n\n    METHODS determinetravelid FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determinetravelid.\n\n    METHODS canceltravel FOR MODIFY\n      IMPORTING keys FOR ACTION travel~canceltravel RESULT result.\n\n    METHODS maintainbookingfee FOR MODIFY\n      IMPORTING keys FOR ACTION travel~maintainbookingfee RESULT result.\nENDCLASS.\n\nCLASS lhc_travel IMPLEMENTATION.\n  METHOD get_instance_authorizations.\n//highlight-start\nTODO\n//highlight-end\n  ENDMETHOD.\n\n  METHOD showtestmessage.\n    DATA message TYPE REF TO zcm_travel.\n\n    message = NEW zcm_travel( severity  = if_abap_behv_message=>severity-success\n                              textid    = zcm_travel=>test_message\n                              user_name = sy-uname ).\n\n    APPEND message TO reported-%other.\n  ENDMETHOD.\n\n  METHOD validateagency.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( AgencyId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/agency FIELDS @abap_true WHERE agency_id = @travel-AgencyId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid    = zcm_travel=>no_agency_found\n                                  agency_id = travel-AgencyId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( AgencyId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validatecustomer.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( CustomerId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/customer FIELDS @abap_true WHERE customer_id = @travel-CustomerId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid      = zcm_travel=>no_customer_found\n                                  customer_id = travel-CustomerId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( CustomerId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validatedates.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( BeginDate EndDate )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Dates and Create Error Message\n      IF travel-EndDate < travel-BeginDate.\n        message = NEW zcm_travel( textid = zcm_travel=>invalid_dates ).\n        APPEND VALUE #( %tky = travel-%tky\n                        %msg = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD determinestatus.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( Status )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Status\n      travel->Status = \'N\'.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky   = travel->%tky\n                           Status = travel->Status ) ).\n  ENDMETHOD.\n\n  METHOD determinetravelid.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( TravelId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Travel ID\n      SELECT FROM /dmo/travel FIELDS MAX(  travel_id ) INTO @DATA(max_travel_id).\n      travel->TravelId = max_travel_id + 1.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( TravelId )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky     = travel->%tky\n                           TravelId = travel->TravelId ) ).\n  ENDMETHOD.\n\n  METHOD canceltravel.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Validate Status and Create Error Message\n      IF travel->Status = \'X\'.\n        message = NEW zcm_travel( textid = zcm_travel=>travel_already_cancelled\n                                  travel = travel->Description ).\n        APPEND VALUE #( %tky     = travel->%tky\n                        %element = VALUE #( Status = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel->%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n\n      " Set Status to Cancelled and Create Success Message\n      travel->Status = \'X\'.\n      message = NEW zcm_travel( severity = if_abap_behv_message=>severity-success\n                                textid   = zcm_travel=>travel_cancelled_successfully\n                                travel   = travel->Description ).\n      APPEND VALUE #( %tky     = travel->%tky\n                      %element = VALUE #( Status = if_abap_behv=>mk-on )\n                      %msg     = message ) TO reported-travel.\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky = t-%tky Status = t-Status ) ).\n\n    " Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky   = t-%tky\n                        %param = t ) ).\n  ENDMETHOD.\n\n  METHOD maintainbookingfee.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Booking Fee\n      travel->BookingFee   = keys[ sy-tabix ]-%param-BookingFee.\n      travel->CurrencyCode = keys[ sy-tabix ]-%param-CurrencyCode.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( BookingFee CurrencyCode )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky         = travel->%tky\n                           BookingFee   = travel->BookingFee\n                           CurrencyCode = travel->CurrencyCode ) ).\n\n    " Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky = t-%tky %param = t ) ).\n  ENDMETHOD.\nENDCLASS.\n')))}O.isMDXComponent=!0}}]);