"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[4972],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>T});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},E=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),E=c(n),T=a,v=E["".concat(i,".").concat(T)]||E[T]||m[T]||l;return n?r.createElement(v,o(o({ref:t},p),{},{components:n})):r.createElement(v,o({ref:t},p))}));function T(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=E;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}E.displayName="MDXCreateElement"},6896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={title:"14. Aktionen implementieren",description:"",sidebar_position:140},o=void 0,s={unversionedId:"rap-cookbook/implement-actions",id:"rap-cookbook/implement-actions",title:"14. Aktionen implementieren",description:"",source:"@site/docs/rap-cookbook/implement-actions.md",sourceDirName:"rap-cookbook",slug:"/rap-cookbook/implement-actions",permalink:"/s4hana/rap-cookbook/implement-actions",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/rap-cookbook/implement-actions.md",tags:[],version:"current",sidebarPosition:140,frontMatter:{title:"14. Aktionen implementieren",description:"",sidebar_position:140},sidebar:"rapCookbookSidebar",previous:{title:"13. Aktionen festlegen",permalink:"/s4hana/rap-cookbook/define-actions"}},i={},c=[{value:"Verhaltensimplementierung ZBP_TRAVEL",id:"verhaltensimplementierung-zbp_travel",level:2},{value:"Global Class ZBP_TRAVEL",id:"global-class-zbp_travel",level:3},{value:"Local Type LHC_TRAVEL",id:"local-type-lhc_travel",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Behandlermethoden der Verhaltensimplementierung f\xfcr Reisen implementieren."),(0,a.kt)("h2",{id:"verhaltensimplementierung-zbp_travel"},"Verhaltensimplementierung ZBP_TRAVEL"),(0,a.kt)("h3",{id:"global-class-zbp_travel"},"Global Class ZBP_TRAVEL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" showLineNumbers',title:'"ZBP_TRAVEL.abap"',showLineNumbers:!0},"CLASS zbp_travel DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_travel.\n  PROTECTED SECTION.\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zbp__travel IMPLEMENTATION.\nENDCLASS.\n")),(0,a.kt)("h3",{id:"local-type-lhc_travel"},"Local Type LHC_TRAVEL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" shwoLineNumbers',title:'"ZBP_TRAVEL.abap"',shwoLineNumbers:!0},'CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.\n  PRIVATE SECTION.\n    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION\n      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.\n    METHODS show_test_message FOR MODIFY\n      IMPORTING keys FOR ACTION travel~show_message.\n    METHODS cancel_travel FOR MODIFY\n      IMPORTING keys FOR ACTION travel~cancel_travel RESULT result.\n    METHODS maintain_booking_fee FOR MODIFY\n      IMPORTING keys FOR ACTION travel~maintain_booking_fee RESULT result.\nENDCLASS.\n\nCLASS lhc_travel IMPLEMENTATION.\n\n  METHOD get_instance_authorizations.\n  ENDMETHOD.\n\n  METHOD show_test_message.\n//highlight-start\n    DATA message TYPE REF TO zcm_travel.\n\n    message = NEW zcm_travel( severity  = if_abap_behv_message=>severity-success\n                              textid    = zcm_travel=>test_message\n                              user_name = sy-uname ).\n\n    APPEND message TO reported-%other.\n//highlight-end\n  ENDMETHOD.\n\n  METHOD cancel_travel.\n//highlight-start\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Validate Status and Create Error Message\n      IF travel->Status = \'X\'.\n        message = NEW zcm_travel( textid = zcm_travel=>travel_already_cancelled\n                                  travel = travel->Description ).\n        APPEND VALUE #( %tky = travel->%tky\n                        %msg = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel->%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n\n      " Set Status to Cancelled and Create Success Message\n      travel->Status = \'X\'.\n      message = NEW zcm_travel( severity = if_abap_behv_message=>severity-success\n                                textid   = zcm_travel=>travel_cancelled_successfully\n                                travel   = travel->Description ).\n      APPEND VALUE #( %tky = travel->%tky\n                      %msg = message ) TO reported-travel.\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky = t-%tky Status = t-Status ) ).\n\n    " Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky   = t-%tky\n                        %param = t ) ).\n//highlight-end\n  ENDMETHOD.\n\n  METHOD maintain_booking_fee.\n//highlight-start\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Booking Fee\n      travel->BookingFee   = keys[ sy-tabix ]-%param-BookingFee.\n      travel->CurrencyCode = keys[ sy-tabix ]-%param-CurrencyCode.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( BookingFee CurrencyCode )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky         = travel->%tky\n                           BookingFee   = travel->BookingFee\n                           CurrencyCode = travel->CurrencyCode ) ).\n\n    " Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky = t-%tky %param = t ) ).\n//highlight-end\n  ENDMETHOD.\n\nENDCLASS.\n')))}m.isMDXComponent=!0}}]);