"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[8998],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),d=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return t?i.createElement(b,o(o({ref:n},s),{},{components:t})):i.createElement(b,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7597:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const a={title:"Datenbankzugriffe mit ABAP SQL",description:"",sidebar_position:120,tags:[]},o=void 0,l={unversionedId:"documentation/abap/open-sql",id:"documentation/abap/open-sql",title:"Datenbankzugriffe mit ABAP SQL",description:"",source:"@site/docs/documentation/abap/open-sql.md",sourceDirName:"documentation/abap",slug:"/documentation/abap/open-sql",permalink:"/s4hana/documentation/abap/open-sql",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/documentation/abap/open-sql.md",tags:[],version:"current",sidebarPosition:120,frontMatter:{title:"Datenbankzugriffe mit ABAP SQL",description:"",sidebar_position:120,tags:[]},sidebar:"documentationSidebar",previous:{title:"Interne Tabellen",permalink:"/s4hana/documentation/abap/internal-tables"},next:{title:"ABAP Objects",permalink:"/s4hana/documentation/abap-objects/"}},c={},d=[{value:"Lesende Datenbankzugriffe",id:"lesende-datenbankzugriffe",level:2},{value:"Definition der Zielvariablen",id:"definition-der-zielvariablen",level:2},{value:"Schreibende Datenbankzugriffe",id:"schreibende-datenbankzugriffe",level:2}],s={toc:d};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Die Structured Query Language (SQL) stellt die erste Wahl dar, wenn es um den Zugriff auf Datenbanken-Verwaltungssysteme (DBMS) geht. SQL umfasst die 3 Untersprachen DDL (Data Definition Language), DML (Data Manipulation Language) und DCL (Data Control Language). DDL wird zum Erzeugen und Verwalten von Datenbanktabellen und Views, DML zum Lesen und \xc4ndern von Datenbanktabellen-Inhalten und DCL zum Festlegen von Zugriffsberechtigungen verwendet. Obwohl SQL gr\xf6\xdftenteils standardisiert ist, besitzt jede Datenbank einen eigenen SQL-Dialekt mit datenbankspezifischen Eigenheiten. ABAP verwendet das datenbankunabh\xe4ngige ABAP SQL, welches vom Datenbankverwaltungssystem dynamisch in natives SQL umgesetzt wird."),(0,r.kt)("admonition",{title:"Hinweis",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"ABAP SQL umfasst lediglich Sprachelemente aus dem Bereich DML.")),(0,r.kt)("h2",{id:"lesende-datenbankzugriffe"},"Lesende Datenbankzugriffe"),(0,r.kt)("p",null,"Lesende Datenbankzugriffe werden mit Hilfe der Anweisung ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," umgesetzt:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die FROM-Klausel benennt die Datenquelle (Datenbanktabelle oder View)"),(0,r.kt)("li",{parentName:"ul"},"Die FIELDS-Klausel beschreibt, welche Felder gelesen werden sollen"),(0,r.kt)("li",{parentName:"ul"},"Die WHERE-Klausel legt die zu selektierenden Zeilen fest"),(0,r.kt)("li",{parentName:"ul"},"Die INTO-Klausel definiert, wohin die selektierten Daten geschrieben werden sollen")),(0,r.kt)("p",null,"Mit der Anweisung ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT SINGLE")," wird ein einzelner Datensatz gelesen, mit dem Zusatz ",(0,r.kt)("inlineCode",{parentName:"p"},"INTO TABLE")," k\xf6nnen mehrere Zeilen einer Datenbanktabelle oder einer View direkt als Block in eine interne Tabelle kopiert werden (Array Fetch). Um einen eindeutigen Zugriff\nzu gew\xe4hrleisten, m\xfcssen dabei alle Schl\xfcsselfelder in der WHERE-Klausel angegeben werden (Ausnahme: Mandant)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA carrier_id TYPE /dmo/carrier_id VALUE 'LH' .\nDATA connection_id TYPE /dmo/connection_id VALUE '0400'.\nDATA connection TYPE /dmo/connection.\nDATA connections TYPE TABLE OF /dmo/connection.\n\n\" Read single entry\nSELECT SINGLE FROM /dmo/connection\n  FIELDS *\n  WHERE carrier_id = @carrier_id AND connection_id = @connection_id\n  INTO @connection.\nIF sy-subrc <> 0.\n  out->write( 'no connection found' ).\nENDIF.\n\n\" Read multiple entries with array fetch\nSELECT FROM /dmo/connection\n  FIELDS *\n  WHERE carrier_id = @carrier_id\n  INTO TABLE @connections.\nIF sy-subrc <> 0.\n  out->write( 'no flights found' ).\nENDIF.\n\n\" Read multiple entries with SELECT loop\nSELECT FROM /dmo/connection\n  FIELDS *\n  WHERE carrier_id = @carrier_id\n  INTO @connection.\n  APPEND connection TO connections.\nENDSELECT.\n")),(0,r.kt)("admonition",{title:"Hinweis",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Mit dem optionalen Zusatz ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," k\xf6nnen die gelesenen Datens\xe4tze sortiert werden.")),(0,r.kt)("admonition",{title:"Hinweis",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Mit dem optionalen Zusatz ",(0,r.kt)("inlineCode",{parentName:"p"},"UP TO...ROWS")," kann die Anzahl der gelesenen Datens\xe4tze begrenzt werden.")),(0,r.kt)("h2",{id:"definition-der-zielvariablen"},"Definition der Zielvariablen"),(0,r.kt)("p",null,"Bei Selektion von bestimmten Feldern muss in der INTO-Klausel eine Variable gew\xe4hlt werden, die den gleichen Aufbau wie die Feldliste besitzt. Der Zusatz ",(0,r.kt)("inlineCode",{parentName:"p"},"CORRESPONDING FIELDS OF")," der INTO-Klausel bewirkt, dass nur gleichnamige Felder der Zielvariable bef\xfcllt\nwerden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA connection TYPE /dmo/connection.\n\nSELECT SINGLE FROM /dmo/connection\n  FIELDS client, carrier_id, connection_id, airport_from_id, airport_to_id\n  INTO @connection.\nIF sy-subrc <> 0.\n  out->write( 'no connection found' ).\nENDIF.\n\nSELECT SINGLE FROM /dmo/connection\n  FIELDS *\n  INTO CORRESPONDING FIELDS OF @connection.\nIF sy-subrc <> 0.\n  out->write( 'no connection found' ).\nENDIF.\n\nSELECT SINGLE FROM /dmo/connection\n  FIELDS *\n  INTO @DATA(connection2).\nIF sy-subrc <> 0.\n  out->write( 'no connection found' ).\nENDIF.\n")),(0,r.kt)("admonition",{title:"Hinweis",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Bei nicht \xfcbereinstimmenden Feldtypen wird eine (aufw\xe4ndige) Typkonvertierung durchgef\xfchrt.")),(0,r.kt)("h2",{id:"schreibende-datenbankzugriffe"},"Schreibende Datenbankzugriffe"),(0,r.kt)("p",null,"F\xfcr schreibende Datenbankzugriffe stellt ABAP die Anweisungen ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT")," (Hinzuf\xfcgen), ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," (\xc4ndern) sowie ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," (L\xf6schen) zur Verf\xfcgung."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA connection TYPE /dmo/connection.\n\nconnection-client = sy-mandt.\nconnection-carrier_id = 'LH'.\nconnection-connection_id = '0400'.\nconnection-airport_from_id = 'FRA'.\nconnection-airport_to_id = 'JFK'.\n\n\" Insert entries\nINSERT /dmo/connection FROM @connection.\nIF sy-subrc <> 0.\n  out->write( 'duplicate key error' ).\nENDIF.\n\n\" Change entries\nUPDATE /dmo/connection FROM @connection.\nIF sy-subrc <> 0.\n  out->write( 'no entry found' ).\nENDIF.\n\n\" Delete entries\nDELETE /dmo/connection FROM @connection.\nIF sy-subrc <> 0.\n  out->write( 'no entry found' ).\nENDIF.\n")))}u.isMDXComponent=!0}}]);