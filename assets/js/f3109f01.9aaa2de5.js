"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[3974],{3905:(e,n,t)=>{t.d(n,{Zo:()=>E,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},E=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},T={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,E=o(e,["components","mdxType","originalType","parentName"]),c=d(t),u=r,v=c["".concat(s,".").concat(u)]||c[u]||T[u]||i;return t?a.createElement(v,l(l({ref:n},E),{},{components:t})):a.createElement(v,l({ref:n},E))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8703:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>T,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={title:"19. Dynamic Feature Controls implementieren",description:"",sidebar_position:190},l=void 0,o={unversionedId:"rap-cookbook/implement-dynamic-feature-controls",id:"rap-cookbook/implement-dynamic-feature-controls",title:"19. Dynamic Feature Controls implementieren",description:"",source:"@site/docs/rap-cookbook/implement-dynamic-feature-controls.md",sourceDirName:"rap-cookbook",slug:"/rap-cookbook/implement-dynamic-feature-controls",permalink:"/s4hana/rap-cookbook/implement-dynamic-feature-controls",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/rap-cookbook/implement-dynamic-feature-controls.md",tags:[],version:"current",sidebarPosition:190,frontMatter:{title:"19. Dynamic Feature Controls implementieren",description:"",sidebar_position:190},sidebar:"rapCookbookSidebar",previous:{title:"18. Berechtigungspr\xfcfungen implementieren",permalink:"/s4hana/rap-cookbook/implement-authority-checks"}},s={},d=[{value:"Behavior Definition <code>ZR_TRAVELTP</code>",id:"behavior-definition-zr_traveltp",level:2},{value:"Verhaltensimplementierung <code>ZBP_TRAVELTP</code>",id:"verhaltensimplementierung-zbp_traveltp",level:2},{value:"Global Class <code>ZBP_TRAVELTP</code>",id:"global-class-zbp_traveltp",level:3},{value:"Local Type <code>LHC_TRAVEL</code>",id:"local-type-lhc_travel",level:3}],E={toc:d};function T(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die Behavior Definition ",(0,r.kt)("inlineCode",{parentName:"li"},"ZR_TRAVELTP")," um eine Dynamic Feature Control f\xfcr die Aktion zum Stornieren einer Reise erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"li"},"ZBP_TRAVEL")," um eine Behandlermethode f\xfcr Dynamic Feature Controls erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Behandlermethode zum Stornieren einer Reise in der Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"li"},"ZBP_TRAVEL")," so anpassen, dass keine Validierung des Status mehr erfolgt")),(0,r.kt)("h2",{id:"behavior-definition-zr_traveltp"},"Behavior Definition ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZR_TRAVELTP")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"managed implementation in class zbp_traveltp unique;\nstrict ( 2 );\nwith draft;\n\ndefine behavior for ZR_TravelTP alias Travel\npersistent table ztravel_a\ndraft table ztravel_d\nlock master\ntotal etag LastChangedAt\nauthorization master ( global, instance )\n\n//etag master <field_name>\n{\n  create;\n  update;\n  delete;\n\n  association _Bookings { create; with draft; }\n\n  static action ShowTestMessage;\n//highlight-start\n  action ( features : instance ) CancelTravel result [1] $self;\n//highlight-end\n  action MaintainBookingFee parameter ZA_BookingFee result [1] $self;\n\n  draft action Activate optimized;\n  draft action Discard;\n  draft action Edit;\n  draft determine action Prepare\n  {\n    validation ValidateDates;\n    validation ValidateCustomer;\n    validation ValidateAgency;\n  }\n  draft action Resume;\n\n  validation ValidateDates on save { create; }\n  validation ValidateCustomer on save { create; }\n  validation ValidateAgency on save { create; }\n\n  determination DetermineStatus on modify { create; }\n  determination DetermineTravelId on modify { create; }\n\n  field ( readonly, numbering : managed ) TravelUuid;\n  field ( mandatory : create ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n  field ( readonly : update ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n  field ( readonly ) CreatedAt, CreatedBy, LastChangedAt, LastChangedBy, Status, TravelId;\n\n  mapping for ztravel_a corresponding\n    {\n      AgencyId = agency_id;\n      BeginDate = begin_date;\n      BookingFee = booking_fee;\n      CreatedAt = created_at;\n      CreatedBy = created_by;\n      CurrencyCode = currency_code;\n      CustomerId = customer_id;\n      Description = description;\n      EndDate = end_date;\n      LastChangedAt = last_changed_at;\n      LastChangedBy = last_changed_by;\n      Status = status;\n      TotalPrice = total_price;\n      TravelId = travel_id;\n      TravelUuid = travel_uuid;\n    }\n}\n\ndefine behavior for ZR_BookingTP alias Booking\npersistent table zbooking_a\ndraft table zbooking_d\nlock dependent by _Travel\nauthorization dependent by _Travel\n//etag master <field_name>\n{\n  update;\n  delete;\n\n  association _Travel [ with draft; }\n\n  field ( readonly, numbering : managed ) BookingUuid;\n  field ( readonly ) TravelUuid;\n\n  mapping for zbooking_a corresponding\n    {\n      BookingDate = booking_Date;\n      BookingId = booking_id;\n      BookingUuid = booking_uuid;\n      CarrierId = carrier_id;\n      ConnectionId = connection_id;\n      CurrencyCode = currency_code;\n      FlightDate = flight_date;\n      FlightPrice = flight_price;\n      TravelUuid = Travel_uuid;\n    }\n}\n")),(0,r.kt)("h2",{id:"verhaltensimplementierung-zbp_traveltp"},"Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZBP_TRAVELTP")),(0,r.kt)("h3",{id:"global-class-zbp_traveltp"},"Global Class ",(0,r.kt)("inlineCode",{parentName:"h3"},"ZBP_TRAVELTP")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVELTP.abap" showLineNumbers',title:'"ZBP_TRAVELTP.abap"',showLineNumbers:!0},"CLASS zbp_traveltp DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_traveltp.\n  PROTECTED SECTION.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zbp_traveltp IMPLEMENTATION.\nENDCLASS.\n")),(0,r.kt)("h3",{id:"local-type-lhc_travel"},"Local Type ",(0,r.kt)("inlineCode",{parentName:"h3"},"LHC_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVELTP.abap" shwoLineNumbers',title:'"ZBP_TRAVELTP.abap"',shwoLineNumbers:!0},"CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.\n  PRIVATE SECTION.\n    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION\n      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.\n\n    METHODS showtestmessage FOR MODIFY\n      IMPORTING keys FOR ACTION travel~showtestmessage.\n\n    METHODS validateagency FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validateagency.\n\n    METHODS validatecustomer FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validatecustomer.\n\n    METHODS validatedates FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validatedates.\n\n    METHODS determinestatus FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determinestatus.\n\n    METHODS determinetravelid FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determinetravelid.\n\n    METHODS canceltravel FOR MODIFY\n      IMPORTING keys FOR ACTION travel~canceltravel RESULT result.\n\n    METHODS maintainbookingfee FOR MODIFY\n      IMPORTING keys FOR ACTION travel~maintainbookingfee RESULT result.\n\n    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION\n      IMPORTING REQUEST requested_authorizations FOR travel RESULT result.\n\n//highlight-start\n    METHODS get_instance_features FOR INSTANCE FEATURES\n      IMPORTING keys REQUEST requested_features FOR travel RESULT result.\n//highlight-end\nENDCLASS.\n\nCLASS lhc_travel IMPLEMENTATION.\n  METHOD get_instance_authorizations.\n    \" Determine Request-Operation\n    DATA(update_requested) = COND #( WHEN requested_authorizations-%update                    = if_abap_behv=>mk-on\n                                       OR requested_authorizations-%action-Edit               = if_abap_behv=>mk-on\n                                       OR requested_authorizations-%action-CancelTravel       = if_abap_behv=>mk-on\n                                       OR requested_authorizations-%action-MaintainBookingFee = if_abap_behv=>mk-on\n                                     THEN abap_true ).\n    DATA(delete_requested) = COND #( WHEN requested_authorizations-%delete = if_abap_behv=>mk-on THEN abap_true ).\n\n    IF update_requested IS INITIAL AND delete_requested IS INITIAL.\n      RETURN.\n    ENDIF.\n\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_TravelTP\n         FIELDS ( AgencyId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Check Authorizations\n    LOOP AT travels INTO DATA(travel).\n      \" Update Operation\n      IF update_requested = abap_true.\n        \" Productive Implementation\n*        AUTHORITY-CHECK OBJECT 'ZAGENCY'\n*                                ID 'ZAGENCY_ID' FIELD travel-AgencyId\n*                                ID 'ACTVT' FIELD '02'.\n*        IF sy-subrc <> 0.\n*          APPEND VALUE #( %tky                       = travel-%tky\n*                          %update                    = if_abap_behv=>auth-unauthorized\n*                          %action-Edit               = if_abap_behv=>auth-unauthorized\n*                          %action-CancelTravel       = if_abap_behv=>auth-unauthorized\n*                          %action-MaintainBookingFee = if_abap_behv=>auth-unauthorized ) TO result.\n*        ELSE.\n*          APPEND VALUE #( %tky                       = travel-%tky\n*                          %update                    = if_abap_behv=>auth-allowed\n*                          %action-Edit               = if_abap_behv=>auth-allowed\n*                          %action-CancelTravel       = if_abap_behv=>auth-allowed\n*                          %action-MaintainBookingFee = if_abap_behv=>auth-allowed ) TO result.\n*        ENDIF.\n\n        \" Test Implementation\n        IF travel-AgencyId <= '070000' OR travel-AgencyId > '070030'.\n          APPEND VALUE #( %tky                       = travel-%tky\n                          %update                    = if_abap_behv=>auth-unauthorized\n                          %action-Edit               = if_abap_behv=>auth-unauthorized\n                          %action-CancelTravel       = if_abap_behv=>auth-unauthorized\n                          %action-MaintainBookingFee = if_abap_behv=>auth-unauthorized ) TO result.\n        ELSE.\n          APPEND VALUE #( %tky                       = travel-%tky\n                          %update                    = if_abap_behv=>auth-allowed\n                          %action-Edit               = if_abap_behv=>auth-allowed\n                          %action-CancelTravel       = if_abap_behv=>auth-allowed\n                          %action-MaintainBookingFee = if_abap_behv=>auth-allowed ) TO result.\n        ENDIF.\n      ENDIF.\n\n      \" Delete Operation\n      IF delete_requested = abap_true.\n        \" Productive Implementation\n*        AUTHORITY-CHECK OBJECT 'ZAGENCY'\n*                        ID 'ZAGENCY_ID' FIELD travel-AgencyId\n*                        ID 'ACTVT' FIELD '06'.\n*        IF sy-subrc <> 0.\n*          APPEND VALUE #( %tky    = travel-%tky\n*                          %delete = if_abap_behv=>auth-unauthorized ) TO result.\n*        ELSE.\n*          APPEND VALUE #( %tky    = travel-%tky\n*                          %delete = if_abap_behv=>auth-allowed ) TO result.\n*        ENDIF.\n\n        \" Test Implementation\n        IF travel-AgencyId <= '070000' OR travel-AgencyId > '070020'.\n          APPEND VALUE #( %tky    = travel-%tky\n                          %delete = if_abap_behv=>auth-unauthorized ) TO result.\n        ELSE.\n          APPEND VALUE #( %tky    = travel-%tky\n                          %delete = if_abap_behv=>auth-allowed ) TO result.\n        ENDIF.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD showtestmessage.\n    DATA message TYPE REF TO zcm_travel.\n\n    message = NEW zcm_travel( severity  = if_abap_behv_message=>severity-success\n                              textid    = zcm_travel=>test_message\n                              user_name = sy-uname ).\n\n    APPEND message TO reported-%other.\n  ENDMETHOD.\n\n  METHOD validateagency.\n    DATA message TYPE REF TO zcm_travel.\n\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_TravelTP\n         FIELDS ( AgencyId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Process Travels\n    LOOP AT travels INTO DATA(travel).\n      \" Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/agency FIELDS @abap_true WHERE agency_id = @travel-AgencyId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid    = zcm_travel=>no_agency_found\n                                  agency_id = travel-AgencyId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( AgencyId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validatecustomer.\n    DATA message TYPE REF TO zcm_travel.\n\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_TravelTP\n         FIELDS ( CustomerId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Process Travels\n    LOOP AT travels INTO DATA(travel).\n      \" Validate Customer and Create Error Message\n      SELECT SINGLE FROM /dmo/customer FIELDS @abap_true WHERE customer_id = @travel-CustomerId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid      = zcm_travel=>no_customer_found\n                                  customer_id = travel-CustomerId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( CustomerId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validatedates.\n    DATA message TYPE REF TO zcm_travel.\n\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_TravelTP\n         FIELDS ( BeginDate EndDate )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Process Travels\n    LOOP AT travels INTO DATA(travel).\n      \" Validate Dates and Create Error Message\n      IF travel-EndDate < travel-BeginDate.\n        message = NEW zcm_travel( textid = zcm_travel=>invalid_dates ).\n        APPEND VALUE #( %tky = travel-%tky\n                        %msg = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD determinestatus.\n    MODIFY ENTITY IN LOCAL MODE ZR_TravelTP\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR key IN keys\n                         ( %tky   = key-%tky\n                           Status = 'N' ) ).\n  ENDMETHOD.\n\n  METHOD determinetravelid.\n    DATA travel_id TYPE /dmo/travel_id.\n\n    \" Get Travel ID\n    SELECT FROM /dmo/travel FIELDS MAX( travel_id ) INTO @DATA(max_travel_id).\n    travel_id = max_travel_id + 1.\n\n    \" Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_TravelTP\n           UPDATE FIELDS ( TravelId )\n           WITH VALUE #( FOR key IN keys\n                         ( %tky     = key-%tky\n                           TravelId = travel_id ) ).\n  ENDMETHOD.\n\n  METHOD canceltravel.\n    DATA message TYPE REF TO zcm_travel.\n\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_TravelTP\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n//highlight-start\n*      \" Validate Status and Create Error Message\n*      IF travel->Status = 'X'.\n*        message = NEW zcm_054906_travel( textid      = zcm_054906_travel=>travel_already_cancelled\n*                                         description = travel->Description ).\n*        APPEND VALUE #( %tky     = travel->%tky\n*                        %element = VALUE #( Status = if_abap_behv=>mk-on )\n*                        %msg     = message ) TO reported-travel.\n*        APPEND VALUE #( %tky = travel->%tky ) TO failed-travel.\n*        DELETE travels INDEX sy-tabix.\n*        CONTINUE.\n*      ENDIF.\n//highlight-end\n      \" Set Status to Cancelled and Create Success Message\n      travel->Status = 'X'.\n      message = NEW zcm_travel( severity    = if_abap_behv_message=>severity-success\n                                textid      = zcm_travel=>travel_cancelled_successfully\n                                description = travel->Description ).\n      APPEND VALUE #( %tky     = travel->%tky\n                      %element = VALUE #( Status = if_abap_behv=>mk-on )\n                      %msg     = message ) TO reported-travel.\n    ENDLOOP.\n\n    \" Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_TravelTP\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky = t-%tky Status = t-Status ) ).\n\n    \" Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky   = t-%tky\n                        %param = t ) ).\n  ENDMETHOD.\n\n  METHOD maintainbookingfee.\n    \" Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_TravelTP\n           UPDATE FIELDS ( BookingFee CurrencyCode )\n           WITH VALUE #( FOR key IN keys\n                         ( %tky         = key-%tky\n                           BookingFee   = key-%param-BookingFee\n                           CurrencyCode = key-%param-CurrencyCode ) ).\n\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_TravelTP\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky = t-%tky %param = t ) ).\n  ENDMETHOD.\n\n  METHOD get_global_authorizations.\n    IF requested_authorizations-%create <> if_abap_behv=>mk-on.\n      RETURN.\n    ENDIF.\n\n    \" Productive Implementation\n*      AUTHORITY-CHECK OBJECT 'ZAGENCY'\n*                      ID 'ZAGENCY_ID' DUMMY\n*                      ID 'ACTVT' FIELD '01'.\n*      IF sy-subrc <> 0.\n*        result-%create = if_abap_behv=>auth-unauthorized.\n*      ELSE.\n*        result-%create = if_abap_behv=>auth-allowed.\n*      ENDIF.\n\n    \" Test Implementation\n    result-%create = if_abap_behv=>auth-allowed.\n  ENDMETHOD.\n\n//highlight-start\n  METHOD get_instance_features.\n    \" Read Travels\n    READ ENTITY IN LOCAL MODE ZR_054906_TravelTP\n         FIELDS ( Status )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    \" Set Feature Control for Action Cancel Travel\n    result = VALUE #( FOR travel IN travels\n                      ( %tky                 = travel-%tky\n                        %action-CancelTravel = COND #( WHEN travel-Status = 'X'\n                                                       THEN if_abap_behv=>fc-o-disabled\n                                                       ELSE if_abap_behv=>fc-o-enabled ) ) ).\n  ENDMETHOD.\n//highlight-end\nENDCLASS.\n")))}T.isMDXComponent=!0}}]);