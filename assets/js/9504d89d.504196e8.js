"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[2535],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>E});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},T={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),v=d(t),E=r,u=v["".concat(s,".").concat(E)]||v[E]||T[E]||i;return t?a.createElement(u,l(l({ref:n},c),{},{components:t})):a.createElement(u,l({ref:n},c))}));function E(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=v;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},5476:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>T,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={title:"16. Aktionen mit Parametern implementieren",description:"",sidebar_position:160},l=void 0,o={unversionedId:"rap-cookbook/implement-actions-with-parameters",id:"rap-cookbook/implement-actions-with-parameters",title:"16. Aktionen mit Parametern implementieren",description:"",source:"@site/docs/rap-cookbook/implement-actions-with-parameters.md",sourceDirName:"rap-cookbook",slug:"/rap-cookbook/implement-actions-with-parameters",permalink:"/s4hana/rap-cookbook/implement-actions-with-parameters",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/rap-cookbook/implement-actions-with-parameters.md",tags:[],version:"current",sidebarPosition:160,frontMatter:{title:"16. Aktionen mit Parametern implementieren",description:"",sidebar_position:160},sidebar:"rapCookbookSidebar",previous:{title:"15. Aktionen implementieren",permalink:"/s4hana/rap-cookbook/implement-actions"}},s={},d=[{value:"Abstract View ZA_BookingFee",id:"abstract-view-za_bookingfee",level:2},{value:"Behavior Definition ZR_TRAVEL",id:"behavior-definition-zr_travel",level:2},{value:"Verhaltensimplementierung ZBP_TRAVEL",id:"verhaltensimplementierung-zbp_travel",level:2},{value:"Global Class ZBP_TRAVEL",id:"global-class-zbp_travel",level:3},{value:"Local Type LHC_TRAVEL",id:"local-type-lhc_travel",level:3},{value:"Behavior Projection ZC_TRAVEL",id:"behavior-projection-zc_travel",level:2},{value:"Metadata Extension ZC_TRAVEL",id:"metadata-extension-zc_travel",level:2}],c={toc:d};function T(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Abstract View f\xfcr Buchungsgeb\xfchren erstellen"),(0,r.kt)("li",{parentName:"ul"},"Behavior Definition f\xfcr Reisen um eine Aktion zur Pflege der Buchungsgeb\xfchren erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Verhaltensimplementierung f\xfcr Reisen um eine Behandlermethode zur Pflege der Buchungsgeb\xfchren erweitern"),(0,r.kt)("li",{parentName:"ul"},"Behavior Projection f\xfcr Reisen um eine Aktion zur Pflege der Buchungsgeb\xfchren erweitern"),(0,r.kt)("li",{parentName:"ul"},"Metadata Extension f\xfcr Reisen um Annotationen f\xfcr eine Aktion zur Pflege der Buchungsgeb\xfchren erweitern")),(0,r.kt)("h2",{id:"abstract-view-za_bookingfee"},"Abstract View ZA_BookingFee"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"//highlight-start\n@EndUserText.label: 'Booking Fee'\ndefine abstract entity ZA_BookingFee\n{\n  @Semantics.amount.currencyCode: 'CurrencyCode'\n  BookingFee   : /dmo/booking_fee;\n  @Consumption.valueHelpDefinition: [{ entity: { name: 'I_CurrencyStdVH', element: 'Currency' } }]\n  CurrencyCode : /dmo/currency_code;\n}\n//highlight-end\n")),(0,r.kt)("h2",{id:"behavior-definition-zr_travel"},"Behavior Definition ZR_TRAVEL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"managed implementation in class zbp_travel unique;\nstrict ( 2 );\n\ndefine behavior for ZR_Travel alias Travel\npersistent table z_travel_a\nlock master\nauthorization master ( instance )\n//etag master <field_name>\n{\n  create;\n  update;\n  delete;\n  association _Bookings { create; }\n\n  static action show_test_message;\n  action cancel_travel result [1] $self;\n//highlight-start\n  action maintain_booking_fee parameter ZA_BookingFee result [1] $self;\n//highlight-end\n\n  validation validate_dates on save { create; }\n  validation validate_customer on save { create; }\n  validation validate_agency on save { create; }\n\n  determination determine_status on modify { create; }\n  determination determine_travel_id on modify { create; }\n\n  field ( readonly, numbering : managed ) TravelUuid;\n  field ( mandatory : create ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n  field ( readonly : update ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n  field ( readonly ) Createdat, Createdby, Lastchangedat, Lastchangedby, Status, TravelId;\n\n  mapping for z_travel_a corresponding\n  {\n    AgencyId = agency_id;\n    BeginDate = begin_date;\n    BookingFee = booking_fee;\n    CreatedAt = created_at;\n    CreatedBy = created_by;\n    CurrencyCode = currency_code;\n    CustomerId = customer_id;\n    Description = description;\n    EndDate = end_date;\n    LastChangedAt = last_changed_at;\n    LastChangedBy = last_changed_by;\n    Status = status;\n    TotalPrice = total_price;\n    TravelId = travel_id;\n    TravelUuid = travel_uuid;\n  }\n}\n\ndefine behavior for ZR_Booking alias Booking\npersistent table z_booking_a\nlock dependent by _Travel\nauthorization dependent by _Travel\n//etag master <field_name>\n{\n  update;\n  delete;\n  field ( readonly ) TravelUuid;\n  association _Travel;\n\n  field ( readonly, numbering : managed ) BookingUuid;\n\n  mapping for z_booking_a corresponding\n  {\n    BookingDate = booking_Date;\n    BookingId = booking_id;\n    BookingUuid = booking_uuid;\n    CarrierId = carrier_id;\n    ConnectionId = connection_id;\n    CurrencyCode = currency_code;\n    FlightDate = flight_date;\n    FlightPrice = flight_price;\n    TravelUuid = Travel_uuid;\n  }\n}\n")),(0,r.kt)("h2",{id:"verhaltensimplementierung-zbp_travel"},"Verhaltensimplementierung ZBP_TRAVEL"),(0,r.kt)("h3",{id:"global-class-zbp_travel"},"Global Class ZBP_TRAVEL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" showLineNumbers',title:'"ZBP_TRAVEL.abap"',showLineNumbers:!0},"CLASS zbp_travel DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_travel.\n  PROTECTED SECTION.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zbp_travel IMPLEMENTATION.\nENDCLASS.\n")),(0,r.kt)("h3",{id:"local-type-lhc_travel"},"Local Type LHC_TRAVEL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" shwoLineNumbers',title:'"ZBP_TRAVEL.abap"',shwoLineNumbers:!0},'CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.\n  PRIVATE SECTION.\n    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION\n      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.\n\n    METHODS show_message FOR MODIFY\n      IMPORTING keys FOR ACTION travel~show_message.\n\n    METHODS cancel_travel FOR MODIFY\n      IMPORTING keys FOR ACTION travel~cancel_travel RESULT result.\n\n    METHODS maintain_booking_fee FOR MODIFY\n      IMPORTING keys FOR ACTION travel~maintain_booking_fee RESULT result.\n\n    METHODS validate_agency FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validate_agency.\n\n    METHODS validate_customer FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validate_customer.\n\n    METHODS validate_dates FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validate_dates.\n\n    METHODS determine_status FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determine_status.\n\n    METHODS determine_travel_id FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determine_travel_id.\n\n    METHODS cancel_travel FOR MODIFY\n      IMPORTING keys FOR ACTION travel~cancel_travel RESULT result.\n\n//highlight-start\n    METHODS maintain_booking_fee FOR MODIFY\n      IMPORTING keys FOR ACTION travel~maintain_booking_fee RESULT result.\n//highlight-end\nENDCLASS.\n\nCLASS lhc_travel IMPLEMENTATION.\n  METHOD get_instance_authorizations.\n  ENDMETHOD.\n\n  METHOD show_test_message.\n    DATA message TYPE REF TO zcm_travel.\n\n    message = NEW zcm_travel( severity  = if_abap_behv_message=>severity-success\n                              textid    = zcm_travel=>test_message\n                              user_name = sy-uname ).\n\n    APPEND message TO reported-%other.\n  ENDMETHOD.\n\n  METHOD validate_agency.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( AgencyId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/agency FIELDS @abap_true WHERE agency_id = @travel-AgencyId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid    = zcm_travel=>no_agency_found\n                                  agency_id = travel-AgencyId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( AgencyId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validate_customer.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( CustomerId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/customer FIELDS @abap_true WHERE customer_id = @travel-CustomerId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid      = zcm_travel=>no_customer_found\n                                  customer_id = travel-CustomerId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( CustomerId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validate_dates.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( BeginDate EndDate )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Dates and Create Error Message\n      IF travel-EndDate < travel-BeginDate.\n        message = NEW zcm_travel( textid = zcm_travel=>invalid_dates ).\n        APPEND VALUE #( %tky = travel-%tky\n                        %msg = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD determine_status.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( Status )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Status\n      travel->Status = \'N\'.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky   = travel->%tky\n                           Status = travel->Status ) ).\n  ENDMETHOD.\n\n  METHOD determine_travel_id.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( TravelId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Travel ID\n      SELECT FROM /dmo/travel FIELDS MAX(  travel_id ) INTO @DATA(max_travel_id).\n      travel->TravelId = max_travel_id + 1.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( TravelId )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky     = travel->%tky\n                           TravelId = travel->TravelId ) ).\n  ENDMETHOD.\n\n  METHOD cancel_travel.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Validate Status and Create Error Message\n      IF travel->Status = \'X\'.\n        message = NEW zcm_travel( textid = zcm_travel=>travel_already_cancelled\n                                  travel = travel->Description ).\n        APPEND VALUE #( %tky     = travel->%tky\n                        %element = VALUE #( Status = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel->%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n\n      " Set Status to Cancelled and Create Success Message\n      travel->Status = \'X\'.\n      message = NEW zcm_travel( severity = if_abap_behv_message=>severity-success\n                                textid   = zcm_travel=>travel_cancelled_successfully\n                                travel   = travel->Description ).\n      APPEND VALUE #( %tky     = travel->%tky\n                      %element = VALUE #( Status = if_abap_behv=>mk-on )\n                      %msg     = message ) TO reported-travel.\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky = t-%tky Status = t-Status ) ).\n\n    " Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky   = t-%tky\n                        %param = t ) ).\n  ENDMETHOD.\n\n//highlight-start\n  METHOD maintain_booking_fee.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         ALL FIELDS\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Booking Fee\n      travel->BookingFee   = keys[ sy-tabix ]-%param-BookingFee.\n      travel->CurrencyCode = keys[ sy-tabix ]-%param-CurrencyCode.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( BookingFee CurrencyCode )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky         = travel->%tky\n                           BookingFee   = travel->BookingFee\n                           CurrencyCode = travel->CurrencyCode ) ).\n\n    " Set Result\n    result = VALUE #( FOR t IN travels\n                      ( %tky = t-%tky %param = t ) ).\n  ENDMETHOD.\n//highlight-end\nENDCLASS.\n')),(0,r.kt)("h2",{id:"behavior-projection-zc_travel"},"Behavior Projection ZC_TRAVEL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"projection;\nstrict ( 2 );\n\ndefine behavior for ZC_Travel alias Travel\n{\n  use create;\n  use update;\n  use delete;\n\n  use association _Bookings { create; }\n\n  use action show_test_message as ShowTestMessage;\n  use action cancel_travel as CancelTravel;\n//highlight-start\n  use action maintain_booking_fee as MaintainBookingFee;\n//highlight-end\n}\n\ndefine behavior for ZC_Booking alias Booking\n{\n  use update;\n  use delete;\n\n  use association _Travel;\n}\n")),(0,r.kt)("h2",{id:"metadata-extension-zc_travel"},"Metadata Extension ZC_TRAVEL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"@Metadata.layer: #CUSTOMER\n@UI.headerInfo:\n{\n  typeNamePlural: 'Travels',\n  typeName: 'Travel',\n  title.value: 'TravelId',\n  description.value: 'Description'\n}\n@UI.presentationVariant: [{sortOrder: [{ by: 'BeginDate', direction: #DESC }]}]\nannotate view ZC_Travel with\n{\n\n  /* Facets */\n  @UI.facet:\n  [\n    { position: 10, targetQualifier: 'TravelDetails', label: 'Travel Details', type: #FIELDGROUP_REFERENCE },\n    { position: 20, targetQualifier: 'AdminData', label: 'Administrative Data', type: #FIELDGROUP_REFERENCE },\n    { position: 30, targetElement: '_Bookings', label: 'Bookings', type: #LINEITEM_REFERENCE }\n  ]\n\n  /* Actions */\n  @UI.lineItem:\n  [\n    { position: 10, dataAction: 'ShowTestMessage', label: 'Show Test Message', type: #FOR_ACTION },\n    { position: 20, dataAction: 'CancelTravel', label: 'Cancel Travel', type: #FOR_ACTION }\n  ]\n//highlight-start\n  @UI.identification: [{ position: 10, dataAction: 'MaintainBookingFee', label: 'Maintain Booking Fee', type: #FOR_ACTION }]\n//highlight-end\n\n  /* Fields */\n  @UI.fieldGroup: [{ position: 10, qualifier: 'AdminData' }]\n  TravelUuid;\n\n  @UI.lineItem: [{ position: 10 }]\n  @UI.fieldGroup: [{ position: 10, qualifier: 'TravelDetails' }]\n  TravelId;\n\n  @UI.lineItem: [{ position: 20 }]\n  @UI.selectionField: [{ position: 10 }]\n  @UI.fieldGroup: [{ position: 20, qualifier: 'TravelDetails' }]\n  AgencyId;\n\n  @UI.lineItem: [{ position: 30 }]\n  @UI.selectionField: [{ position: 20 }]\n  @UI.fieldGroup: [{ position: 30, qualifier: 'TravelDetails' }]\n  CustomerId;\n\n  @UI.lineItem: [{ position: 40 }]\n  @UI.selectionField: [{ position: 30 }]\n  @UI.fieldGroup: [{ position: 40, qualifier: 'TravelDetails' }]\n  BeginDate;\n\n  @UI.lineItem: [{ position: 50 }]\n  @UI.selectionField: [{ position: 40 }]\n  @UI.fieldGroup: [{ position: 50, qualifier: 'TravelDetails' }]\n  EndDate;\n\n  @UI.fieldGroup: [{ position: 60, qualifier: 'TravelDetails' }]\n  BookingFee;\n\n  @UI.lineItem: [{ position: 60 }]\n  @UI.selectionField: [{ position: 50 }]\n  @UI.fieldGroup: [{ position: 70, qualifier: 'TravelDetails' }]\n  TotalPrice;\n\n  //  CurrencyCode;\n\n  @UI.lineItem: [{ position: 70, criticality: 'BeginDateCriticality', criticalityRepresentation: #WITHOUT_ICON }]\n  @UI.fieldGroup: [{ position: 80, qualifier: 'TravelDetails' }]\n  Description;\n\n  @UI.lineItem: [{ position: 80, criticality: 'StatusCriticality', criticalityRepresentation: #WITHOUT_ICON }]\n  @UI.selectionField: [{ position: 60 }]\n  @UI.fieldGroup: [{ position: 90, qualifier: 'TravelDetails', criticality: 'StatusCriticality', criticalityRepresentation: #WITHOUT_ICON }]\n  Status;\n\n  @UI.fieldGroup: [{ position: 20, qualifier: 'AdminData' }]\n  Createdby;\n\n  @UI.fieldGroup: [{ position: 30, qualifier: 'AdminData' }]\n  Createdat;\n\n  @UI.fieldGroup: [{ position: 40, qualifier: 'AdminData' }]\n  Lastchangedby;\n\n  @UI.fieldGroup: [{ position: 50, qualifier: 'AdminData' }]\n  Lastchangedat;\n\n}\n")))}T.isMDXComponent=!0}}]);