"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[907],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var l=2;l<s;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=t(7462),i=(t(7294),t(3905));const s={title:"SQL-Funktionen",description:"",sidebar_position:30,tags:[]},r=void 0,o={unversionedId:"abap-cds/documentation/sql-functions",id:"abap-cds/documentation/sql-functions",title:"SQL-Funktionen",description:"",source:"@site/docs/abap-cds/documentation/sql-functions.md",sourceDirName:"abap-cds/documentation",slug:"/abap-cds/documentation/sql-functions",permalink:"/s4hana/abap-cds/documentation/sql-functions",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/abap-cds/documentation/sql-functions.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"SQL-Funktionen",description:"",sidebar_position:30,tags:[]},sidebar:"abapCDSSidebar",previous:{title:"ABAP CDS Views",permalink:"/s4hana/abap-cds/documentation/cds-view-basics"},next:{title:"Tabellen-Joins",permalink:"/s4hana/abap-cds/documentation/joins"}},c={},l=[{value:"Fallunterscheidungen",id:"fallunterscheidungen",level:2},{value:"Arithmetische Ausdr\xfccke",id:"arithmetische-ausdr\xfccke",level:2},{value:"Aggregatfunktionen",id:"aggregatfunktionen",level:2},{value:"Eingebaute Funktionen",id:"eingebaute-funktionen",level:2}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"ABAP CDS Views unterst\xfctzen SQL-Funktionen wie Fallunterscheidungen, Arithmetische Ausdr\xfccke und Aggregatfunktionen. Zudem stellen die ABAP CDS einige eingebaute Funktionen zur Verf\xfcgung."),(0,i.kt)("h2",{id:"fallunterscheidungen"},"Fallunterscheidungen"),(0,i.kt)("p",null,"Die ABAP CDS kennen einfache Fallunterscheidungen mit ",(0,i.kt)("inlineCode",{parentName:"p"},"CASE...WHEN...THEN...END")," (vergleichbar mit dem ABAP-Konstrukt ",(0,i.kt)("inlineCode",{parentName:"p"},"CASE...WHEN...ENDCASE"),") sowie komplexe Fallunterscheidungen mit ",(0,i.kt)("inlineCode",{parentName:"p"},"CASE WHEN...THEN...END")," (vergleichbar mit dem ABAP-Konstrukt ",(0,i.kt)("inlineCode",{parentName:"p"},"IF...ELSE...ENDIF"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"@AbapCatalog.sqlViewName: 'ABAPCDSVIEW'\n@AbapCatalog.compiler.compareFilter: true\n@AbapCatalog.preserveKey: true\n@AccessControl.authorizationCheck: #CHECK\n@EndUserText.label: 'ABAP CDS View'\ndefine view AbapCdsView\n  as select from sbook\n{\n  cancelled  as CancelledCode,\n  case cancelled\n    when 'X' then 'Cancelled'\n    when '' then 'Booked'\n    else ''\n  end        as CancelledText,\n  class      as FlightClass,\n  luggweight as LuggageWeight,\n  wunit      as LuggageWeightUnit,\n  case when class = 'F' then ''\n       when wunit = 'KG' and luggweight > 25 then 'X'\n       when wunit = 'LB' and luggweight > 44 then 'X'\n       else ''\n   end       as ExcessLugagge\n}\n")),(0,i.kt)("h2",{id:"arithmetische-ausdr\xfccke"},"Arithmetische Ausdr\xfccke"),(0,i.kt)("p",null,"F\xfcr arithmetische Ausdr\xfccke k\xf6nnen in den ABAP CDS die Operatoren ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," und ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," verwendet werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"@AbapCatalog.sqlViewName: 'ABAPCDSVIEW'\n@AbapCatalog.compiler.compareFilter: true\n@AbapCatalog.preserveKey: true\n@AccessControl.authorizationCheck: #CHECK\n@EndUserText.label: 'ABAP CDS View'\ndefine view AbapCdsView\n  as select from sflight\n{\n  seatsmax                                                              as MaxSeatsEconomy,\n  seatsocc                                                              as OccupiedSeatsEconomy,\n  seatsmax - seatsocc                                                   as FreeSeatsEconomy,\n  seatsmax_b                                                            as MaxSeatsBusiness,\n  seatsmax_f                                                            as MaxSeatsFirst,\n  seatsmax + seatsmax_b + seatsmax_f                                    as MaxSeatsTotal,\n  price                                                                 as OldPrice,\n  price * 2                                                             as DoublePrice,\n  cast(price as abap.fltp) * 1.1                                        as NewPrice,\n  ( cast(seatsocc as abap.fltp) / cast(seatsmax as abap.fltp) ) * 100.0 as OccupancyRate,\n}\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"danger"}),(0,i.kt)("h2",{id:"aggregatfunktionen"},"Aggregatfunktionen"),(0,i.kt)("p",null,"Die ABAP CDS unterst\xfctzen die klassischen Aggregatfunktionen ",(0,i.kt)("inlineCode",{parentName:"p"},"count"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sum"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"avg"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"min")," und ",(0,i.kt)("inlineCode",{parentName:"p"},"max"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"@AbapCatalog.sqlViewName: 'ABAPCDSVIEW'\n@AbapCatalog.compiler.compareFilter: true\n@AbapCatalog.preserveKey: true\n@AccessControl.authorizationCheck: #CHECK\n@EndUserText.label: 'ABAP CDS View'\ndefine view AbapCdsView\n  as select from sflight\n{\n  carrid                                               as CarrierId,\n  connid                                               as ConnectionId,\n  count(*)                                             as NumberOfFlights,\n  count(distinct planetype)                            as NumberOfDifferentPlanetypes,\n  sum(seatsocc)                                        as TotalOccupiedSeats,\n  sum(paymentsum)                                      as TotalPaymentsum,\n  avg(price as abap.dec(16,2))                         as AveragePrice,\n  min(seatsocc)                                        as MinimumOccupiedSeats,\n  max(seatsocc)                                        as MaximumOccupiedSeats,\n  sum(case when seatsocc = seatsmax then 1 else 0 end) as NumberOfBookedUpFlights,\n  sum(case when seatsocc = 0 then 1 else 0 end)        as NumberOfEmptyFlights\n}\nwhere\n  price < 1000\ngroup by\n  carrid,\n  connid\nhaving\n  sum( paymentsum ) > 4500000\n")),(0,i.kt)("h2",{id:"eingebaute-funktionen"},"Eingebaute Funktionen"),(0,i.kt)("p",null," Die ABAP CDS stellen verschiedene numerische Funktionen, Zeichenkettenfunktionen, Funktionen zur W\xe4hrungs- und Einheitenumrechnung sowie Datums- und Zeitfunktionen zur Verf\xfcgung."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"@AbapCatalog.sqlViewName: 'ABAPCDSVIEW'\n@AbapCatalog.compiler.compareFilter: true\n@AbapCatalog.preserveKey: true\n@AccessControl.authorizationCheck: #CHECK\n@EndUserText.label: 'ABAP CDS View'\ndefine view AbapCdsView\n as select from sflight\n   inner join   spfli on  sflight.carrid = spfli.carrid\n                      and sflight.connid = spfli.connid\n{\n /*\n  * Numerische Funktionen\n  */\n 5.0 / 3.0                                                as Fltp1,\n div(5, 3)                                                as Div1,\n mod(5, 3)                                                as Mod1,\n division(5, 3, 2)                                        as Division1,\n price                                                    as Price,\n round(price, -2)                                         as RoundedPrice,\n floor(1.9)                                               as Floor1,\n ceil(1.1)                                                as Ceil1,\n 1.43565                                                  as Fltp2,\n fltp_to_dec(1.43565 as abap.dec(16,2))                   as FltpToDec1,\n /*\n  * Zeichenkettenfunktionen\n  */\n concat_with_space('Hallo', 'Welt', 1)                    as ConcatWithSpace1,\n planetype                                                as Planetype,\n replace(replace(planetype, 'A', 'B'), '600', '400')      as ReplacedPlanetype,\n substring('Hallo Welt', 7, 4)                            as Substring1,\n length('X  ')                                            as LengthXSS,\n length('  X')                                            as LengthSSX,\n length(' ')                                              as LengthS,\n /*\n  * W\xe4hrungs- und Einheitenumrechnung\n  */\n distance                                                 as OldDistance,\n distid                                                   as OldDistanceUnit,\n @Semantics.quantity.unitOfMeasure: 'ConvertedDistanceUnit'\n unit_conversion(\n   quantity => distance,\n   source_unit => distid,\n   target_unit => cast('KM' as abap.unit) )               as ConvertedDistance,\n cast('KM' as abap.unit)                                  as ConvertedDistanceUnit,\n /*\n  * Datums- und Zeitfunktionen\n  */\n dats_add_days(cast('20211005' as abap.dats), 14, 'FAIL') as DatsAddDays\n}\n")))}p.isMDXComponent=!0}}]);