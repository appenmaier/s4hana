"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[20],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2776:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={title:"Fallunterscheidungen",description:"",sidebar_position:60,tags:[]},o=void 0,l={unversionedId:"documentation/abap/cases",id:"documentation/abap/cases",title:"Fallunterscheidungen",description:"",source:"@site/docs/documentation/abap/cases.md",sourceDirName:"documentation/abap",slug:"/documentation/abap/cases",permalink:"/s4hana/documentation/abap/cases",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/documentation/abap/cases.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Fallunterscheidungen",description:"",sidebar_position:60,tags:[]},sidebar:"documentationSidebar",previous:{title:"Zeichenketten und Zeichenketten-Templates",permalink:"/s4hana/documentation/abap/strings"},next:{title:"Schleifen",permalink:"/s4hana/documentation/abap/loops"}},c={},s=[{value:"Einfache Fallunterscheidungen",id:"einfache-fallunterscheidungen",level:2},{value:"Komplexe Fallunterscheidungen",id:"komplexe-fallunterscheidungen",level:2},{value:"Logische Operatoren und Vergleichsoperatoren",id:"logische-operatoren-und-vergleichsoperatoren",level:2}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In ABAP kommen sowohl einfache als auch komplexe Fallunterscheidungen zum Einsatz."),(0,a.kt)("h2",{id:"einfache-fallunterscheidungen"},"Einfache Fallunterscheidungen"),(0,a.kt)("p",null,"Einfache Fallunterscheidungen k\xf6nnen mit ",(0,a.kt)("inlineCode",{parentName:"p"},"IF...ELSE...ENDIF")," realisiert werden. Mit dem IF-Konstrukt k\xf6nnen beliebig logische Ausdr\xfccke als Pr\xfcfbedingung angegeben werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA carrier_id TYPE /dmo/carrier_id VALUE 'LH'.\nDATA flight_date TYPE /dmo/flight_date VALUE '20230104'.\n\nIF NOT ( flight_date >= '20230101' AND flight_date <= '20231231' ) OR carrier_id = 'LH'.\n  WRITE 'X'.\nELSE.\n  WRITE ' '.\nENDIF.\n")),(0,a.kt)("admonition",{title:"Hinweis",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Der ELSE-Zweig ist optional.")),(0,a.kt)("h2",{id:"komplexe-fallunterscheidungen"},"Komplexe Fallunterscheidungen"),(0,a.kt)("p",null,"Komplexe Fallunterscheidungen k\xf6nnen mit ",(0,a.kt)("inlineCode",{parentName:"p"},"CASE...WHEN...ENDCASE")," realisiert werden. Hiermit sind \xfcbersichtliche Fallunterscheidung m\xf6glich."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA carrier_id TYPE /dmo/carrier_id VALUE 'LH'.\n\nCASE carrier_id.\n  WHEN 'LH' OR 'lh' OR 'Lh' OR 'lH'.\n    WRITE'Lufthansa'.\n  WHEN 'AA' OR 'aa' OR 'Aa' OR 'aA'.\n    WRITE 'American Airlines'.\n  WHEN OTHERS.\n    WRITE carrier_id.\nENDCASE.\n")),(0,a.kt)("h2",{id:"logische-operatoren-und-vergleichsoperatoren"},"Logische Operatoren und Vergleichsoperatoren"),(0,a.kt)("p",null,"In ABAP sind beliebig tief geschachtelte Ausdr\xfccke m\xf6glich. Die Verarbeitungsreihenfolge folgt dabei den herk\xf6mmlichen algebraischen und aussagenlogischen Regeln."),(0,a.kt)("p",null,"Die logische Und-Verkn\xfcpfung wird durch den Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"AND"),", die logische Oder-Verkn\xfcpfung durch den Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"OR")," und die logische Verneinung durch den Operator ",(0,a.kt)("inlineCode",{parentName:"p"},"NOT")," realisiert. Als Vergleichsoperatoren stehen ",(0,a.kt)("inlineCode",{parentName:"p"},"="),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,a.kt)("inlineCode",{parentName:"p"},">"),", ",(0,a.kt)("inlineCode",{parentName:"p"},">=")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"BETWEEN")," zur\nVerf\xfcgung. Zus\xe4tzlich k\xf6nnen die Abfragen ",(0,a.kt)("inlineCode",{parentName:"p"},"IS INITIAL")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"IS NOT INITAL")," verwendet werden."))}u.isMDXComponent=!0}}]);