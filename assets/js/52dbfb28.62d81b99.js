"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[20],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>g});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(r),g=i,m=s["".concat(c,".").concat(g)]||s[g]||u[g]||a;return r?t.createElement(m,o(o({ref:n},d),{},{components:r})):t.createElement(m,o({ref:n},d))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=s;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},2776:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=r(7462),i=(r(7294),r(3905));const a={title:"Verzweigungen",description:"",sidebar_position:60,tags:[]},o=void 0,l={unversionedId:"documentation/abap/cases",id:"documentation/abap/cases",title:"Verzweigungen",description:"",source:"@site/docs/documentation/abap/cases.md",sourceDirName:"documentation/abap",slug:"/documentation/abap/cases",permalink:"/s4hana/documentation/abap/cases",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/documentation/abap/cases.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Verzweigungen",description:"",sidebar_position:60,tags:[]},sidebar:"documentationSidebar",previous:{title:"Zeichenketten und Zeichenketten-Templates",permalink:"/s4hana/documentation/abap/strings"},next:{title:"Schleifen",permalink:"/s4hana/documentation/abap/loops"}},c={},p=[{value:"Einfachverzweigungen",id:"einfachverzweigungen",level:2},{value:"Logische Operatoren und Vergleichsoperatoren",id:"logische-operatoren-und-vergleichsoperatoren",level:2},{value:"Mehrfachverzweigungen",id:"mehrfachverzweigungen",level:2}],d={toc:p};function u(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"einfachverzweigungen"},"Einfachverzweigungen"),(0,i.kt)("p",null,"Einfachverzweigungen k\xf6nnen in ABAP entweder mit ",(0,i.kt)("inlineCode",{parentName:"p"},"IF...ELSE...ENDIF")," oder dem Konstruktor-Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," realisiert werden. Dabei k\xf6nnen als Pr\xfcfbedingung beliebig komplexe logische Ausdr\xfccke angegeben werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA flight_date TYPE /dmo/flight_date VALUE '20230104'.\n\nIF flight_date BETWEEN '20230101' AND '20231231'.\n  out->write( 'condition fulfilled' ).\nELSE.\n  out->write( 'condition not fulfilled' ).\nENDIF.\n\nout->write( COND #( WHEN flight_date BETWEEN '20230101' AND '20231231' THEN 'condition fulfilled'\n                    ELSE 'condition not fulfilled' ) ).\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Der ELSE-Zweig ist optional.")),(0,i.kt)("h2",{id:"logische-operatoren-und-vergleichsoperatoren"},"Logische Operatoren und Vergleichsoperatoren"),(0,i.kt)("p",null,"In ABAP sind beliebig tief geschachtelte Ausdr\xfccke m\xf6glich. Die Verarbeitungsreihenfolge folgt dabei den herk\xf6mmlichen algebraischen und aussagenlogischen Regeln."),(0,i.kt)("p",null,"Die logische Und-Verkn\xfcpfung wird in ABAP durch den Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"AND"),", die logische Oder-Verkn\xfcpfung durch den Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"OR")," und die logische Verneinung durch den Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"NOT")," realisiert. Als Vergleichsoperatoren stehen ",(0,i.kt)("inlineCode",{parentName:"p"},"="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,i.kt)("inlineCode",{parentName:"p"},">"),", ",(0,i.kt)("inlineCode",{parentName:"p"},">=")," und ",(0,i.kt)("inlineCode",{parentName:"p"},"BETWEEN")," zur\nVerf\xfcgung. Zus\xe4tzlich k\xf6nnen die Abfragen ",(0,i.kt)("inlineCode",{parentName:"p"},"IS INITIAL")," und ",(0,i.kt)("inlineCode",{parentName:"p"},"IS NOT INITAL")," sowie die Abfrage ",(0,i.kt)("inlineCode",{parentName:"p"},"BETWEEN...AND")," verwendet werden."),(0,i.kt)("h2",{id:"mehrfachverzweigungen"},"Mehrfachverzweigungen"),(0,i.kt)("p",null,"Mehrfachverzweigungen (auch Fallunterscheidungen genanntn) k\xf6nnen entweder mit verschachtelten Einfachverzweiungen, mit ",(0,i.kt)("inlineCode",{parentName:"p"},"CASE...WHEN...ENDCASE")," oder mit dem Konstruktor-Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"SWITCH")," realisiert werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA carrier_id TYPE /dmo/carrier_id VALUE 'LH'.\n\nIF carrier_id = 'LH' OR carrier_id = 'lh' OR carrier_id = 'Lh' OR carrier_id = 'lH'.\n  out->write( 'Lufthansa' ).\nELSEIF carrier_id = 'AA' OR carrier_id = 'aa' OR carrier_id = 'Aa' OR carrier_id = 'aA'.\n  out->write( 'American Airlines' ).\nELSE.\n  out->write( carrier_id ).\nENDIF.\n\nCASE carrier_id.\n  WHEN 'LH' OR 'lh' OR 'Lh' OR 'lH'.\n    out->write( 'Lufthansa' ).\n  WHEN 'AA' OR 'aa' OR 'Aa' OR 'aA'.\n    out->write( 'American Airlines' ).\n  WHEN OTHERS.\n    out->write( carrier_id ).\nENDCASE.\n\nout->write( SWITCH #( carrier_id WHEN 'LH' OR 'lh' OR 'Lh' OR 'lH' THEN 'Lufthansa'\n                                 WHEN 'AA' OR 'aa' OR 'Aa' OR 'aA' THEN 'American Airlines'\n                                 ELSE carrier_id ) ).\n")))}u.isMDXComponent=!0}}]);