"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[1024],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>v});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},T=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),T=d(t),v=r,E=T["".concat(o,".").concat(v)]||T[v]||m[v]||i;return t?a.createElement(E,s(s({ref:n},c),{},{components:t})):a.createElement(E,s({ref:n},c))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=T;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var d=2;d<i;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}T.displayName="MDXCreateElement"},9424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={title:"14. Ermittlungen implementieren",description:"",sidebar_position:140},s=void 0,l={unversionedId:"rap-cookbook/implement-determinations",id:"rap-cookbook/implement-determinations",title:"14. Ermittlungen implementieren",description:"",source:"@site/docs/rap-cookbook/implement-determinations.md",sourceDirName:"rap-cookbook",slug:"/rap-cookbook/implement-determinations",permalink:"/s4hana/rap-cookbook/implement-determinations",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/rap-cookbook/implement-determinations.md",tags:[],version:"current",sidebarPosition:140,frontMatter:{title:"14. Ermittlungen implementieren",description:"",sidebar_position:140},sidebar:"rapCookbookSidebar",previous:{title:"13. Validierungen implementieren",permalink:"/s4hana/rap-cookbook/implement-validations"},next:{title:"15. Aktionen implementieren",permalink:"/s4hana/rap-cookbook/implement-actions"}},o={},d=[{value:"BO Base View <code>ZR_Travel</code>",id:"bo-base-view-zr_travel",level:2},{value:"Behavior Definition <code>ZR_TRAVEL</code>",id:"behavior-definition-zr_travel",level:2},{value:"Verhaltensimplementierung <code>ZBP_TRAVEL</code>",id:"verhaltensimplementierung-zbp_travel",level:2},{value:"Global Class <code>ZBP_TRAVEL</code>",id:"global-class-zbp_travel",level:3},{value:"Local Type <code>LHC_TRAVEL</code>",id:"local-type-lhc_travel",level:3}],c={toc:d};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die BO Base View ",(0,r.kt)("inlineCode",{parentName:"li"},"ZR_Travel")," um Annotationen zur Ermittlung administrativer Daten erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Behavior Definition ",(0,r.kt)("inlineCode",{parentName:"li"},"ZR_TRAVEL")," um statische Feldkontrollen und Ermittlungen erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"li"},"ZBP_TRAVEL")," um Behandlermethoden zu Ermittlungen erweitern")),(0,r.kt)("h2",{id:"bo-base-view-zr_travel"},"BO Base View ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZR_Travel")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"@AccessControl.authorizationCheck: #NOT_REQUIRED\n@EndUserText.label: 'Travel'\ndefine root view entity ZR_Travel\n  as select from z_travel_a\n  composition [0..*] of ZR_Booking      as _Bookings\n  association [1..1] to ZI_CustomerText as _CustomerText on $projection.CustomerId = _CustomerText.CustomerId\n{\n  key travel_uuid        as TravelUuid,\n      travel_id          as TravelId,\n      agency_id          as AgencyId,\n      @ObjectModel.text.element: ['CustomerName']\n      customer_id        as CustomerId,\n      begin_date         as BeginDate,\n      end_date           as EndDate,\n      @Semantics.amount.currencyCode: 'CurrencyCode'\n      booking_fee        as BookingFee,\n      @Semantics.amount.currencyCode: 'CurrencyCode'\n      total_price        as TotalPrice,\n      currency_code      as CurrencyCode,\n      description        as Description,\n      status             as Status,\n\n      /* Administrative Data */\n//highlight-start\n      @Semantics.user.createdBy: true\n//highlight-end\n      created_by         as CreatedBy,\n//highlight-start\n      @Semantics.systemDateTime.createdAt: true\n//highlight-end\n      created_at         as CreatedAt,\n//highlight-start\n      @Semantics.user.lastChangedBy: true\n//highlight-end\n      last_changed_by    as LastChangedBy,\n//highlight-start\n      @Semantics.systemDateTime.lastChangedAt: true\n//highlight-end\n      last_changed_at    as LastChangedAt,\n\n      /* Transient Data */\n      _CustomerText.Name as CustomerName,\n      case when dats_days_between($session.user_date, begin_date) >= 14 then 3\n           when dats_days_between($session.user_date, begin_date) >= 7 then 2\n           when dats_days_between($session.user_date, begin_date) >= 0 then 1\n           else 0\n      end                as BeginDateCriticality,\n      case status when 'B' then 3\n                  when 'N' then 0\n                  when 'X' then 1\n                  else 0\n      end                as StatusCriticality,\n\n      /* Associations */\n      _Bookings\n}\n")),(0,r.kt)("h2",{id:"behavior-definition-zr_travel"},"Behavior Definition ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZR_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"managed implementation in class zbp_travel unique;\nstrict ( 2 );\n\ndefine behavior for ZR_Travel alias Travel\npersistent table z_travel_a\nlock master\nauthorization master ( instance )\n//etag master <field_name>\n{\n  create;\n  update;\n  delete;\n  association _Bookings { create; }\n\n  static action show_test_message;\n\n  validation validate_dates on save { create; }\n  validation validate_customer on save { create; }\n  validation validate_agency on save { create; }\n\n//highlight-start\n  determination determine_status on modify { create; }\n  determination determine_travel_id on modify { create; }\n//highlight-end\n\n  field ( readonly, numbering : managed ) TravelUuid;\n  field ( mandatory : create ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n  field ( readonly : update ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n//highlight-start\n  field ( readonly ) Createdat, Createdby, Lastchangedat, Lastchangedby, Status, TravelId;\n//highlight-end\n\n  mapping for z_travel_a corresponding\n  {\n    AgencyId = agency_id;\n    BeginDate = begin_date;\n    BookingFee = booking_fee;\n    CreatedAt = created_at;\n    CreatedBy = created_by;\n    CurrencyCode = currency_code;\n    CustomerId = customer_id;\n    Description = description;\n    EndDate = end_date;\n    LastChangedAt = last_changed_at;\n    LastChangedBy = last_changed_by;\n    Status = status;\n    TotalPrice = total_price;\n    TravelId = travel_id;\n    TravelUuid = travel_uuid;\n  }\n}\n\ndefine behavior for ZR_Booking alias Booking\npersistent table z_booking_a\nlock dependent by _Travel\nauthorization dependent by _Travel\n//etag master <field_name>\n{\n  update;\n  delete;\n  field ( readonly ) TravelUuid;\n  association _Travel;\n\n  field ( readonly, numbering : managed ) BookingUuid;\n\n  mapping for z_booking_a corresponding\n  {\n    BookingDate = booking_Date;\n    BookingId = booking_id;\n    BookingUuid = booking_uuid;\n    CarrierId = carrier_id;\n    ConnectionId = connection_id;\n    CurrencyCode = currency_code;\n    FlightDate = flight_date;\n    FlightPrice = flight_price;\n    TravelUuid = Travel_uuid;\n  }\n}\n")),(0,r.kt)("h2",{id:"verhaltensimplementierung-zbp_travel"},"Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZBP_TRAVEL")),(0,r.kt)("h3",{id:"global-class-zbp_travel"},"Global Class ",(0,r.kt)("inlineCode",{parentName:"h3"},"ZBP_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" showLineNumbers',title:'"ZBP_TRAVEL.abap"',showLineNumbers:!0},"CLASS zbp_travel DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_travel.\n  PROTECTED SECTION.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zbp_travel IMPLEMENTATION.\nENDCLASS.\n")),(0,r.kt)("h3",{id:"local-type-lhc_travel"},"Local Type ",(0,r.kt)("inlineCode",{parentName:"h3"},"LHC_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" shwoLineNumbers',title:'"ZBP_TRAVEL.abap"',shwoLineNumbers:!0},'CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.\n  PRIVATE SECTION.\n    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION\n      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.\n\n    METHODS show_message FOR MODIFY\n      IMPORTING keys FOR ACTION travel~show_message.\n\n    METHODS cancel_travel FOR MODIFY\n      IMPORTING keys FOR ACTION travel~cancel_travel RESULT result.\n\n    METHODS maintain_booking_fee FOR MODIFY\n      IMPORTING keys FOR ACTION travel~maintain_booking_fee RESULT result.\n\n    METHODS validate_agency FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validate_agency.\n\n    METHODS validate_customer FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validate_customer.\n\n    METHODS validate_dates FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validate_dates.\n\n//highlight-start\n    METHODS determine_status FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determine_status.\n\n    METHODS determine_travel_id FOR DETERMINE ON MODIFY\n      IMPORTING keys FOR travel~determine_travel_id.\n//highlight-end\nENDCLASS.\n\nCLASS lhc_travel IMPLEMENTATION.\n  METHOD get_instance_authorizations.\n  ENDMETHOD.\n\n  METHOD show_test_message.\n    DATA message TYPE REF TO zcm_travel.\n\n    message = NEW zcm_travel( severity  = if_abap_behv_message=>severity-success\n                              textid    = zcm_travel=>test_message\n                              user_name = sy-uname ).\n\n    APPEND message TO reported-%other.\n  ENDMETHOD.\n\n  METHOD validate_agency.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( AgencyId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/agency FIELDS @abap_true WHERE agency_id = @travel-AgencyId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid    = zcm_travel=>no_agency_found\n                                  agency_id = travel-AgencyId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( AgencyId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validate_customer.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( CustomerId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/customer FIELDS @abap_true WHERE customer_id = @travel-CustomerId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid      = zcm_travel=>no_customer_found\n                                  customer_id = travel-CustomerId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( CustomerId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n  METHOD validate_dates.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( BeginDate EndDate )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n\n      " Validate Dates and Create Error Message\n      IF travel-EndDate < travel-BeginDate.\n        message = NEW zcm_travel( textid = zcm_travel=>invalid_dates ).\n        APPEND VALUE #( %tky = travel-%tky\n                        %msg = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n        CONTINUE.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n\n//highlight-start\n  METHOD determine_status.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( Status )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Status\n      travel->Status = \'N\'.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( Status )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky   = travel->%tky\n                           Status = travel->Status ) ).\n  ENDMETHOD.\n//highlight-end\n\n//highlight-start\n  METHOD determine_travel_id.\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( TravelId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels REFERENCE INTO DATA(travel).\n\n      " Set Travel ID\n      SELECT FROM /dmo/travel FIELDS MAX(  travel_id ) INTO @DATA(max_travel_id).\n      travel->TravelId = max_travel_id + 1.\n\n    ENDLOOP.\n\n    " Modify Travels\n    MODIFY ENTITY IN LOCAL MODE ZR_Travel\n           UPDATE FIELDS ( TravelId )\n           WITH VALUE #( FOR t IN travels\n                         ( %tky     = travel->%tky\n                           TravelId = travel->TravelId ) ).\n  ENDMETHOD.\n//highlight-end\nENDCLASS.\n')))}m.isMDXComponent=!0}}]);