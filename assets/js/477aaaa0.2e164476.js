"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[6995],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=i,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1362:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={title:"RAP Business Objects (RAP BOs)",description:"",sidebar_position:20,tags:[]},o=void 0,s={unversionedId:"documentation/rap/rap-bos",id:"documentation/rap/rap-bos",title:"RAP Business Objects (RAP BOs)",description:"",source:"@site/docs/documentation/rap/rap-bos.md",sourceDirName:"documentation/rap",slug:"/documentation/rap/rap-bos",permalink:"/s4hana/documentation/rap/rap-bos",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/documentation/rap/rap-bos.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"RAP Business Objects (RAP BOs)",description:"",sidebar_position:20,tags:[]},sidebar:"documentationSidebar",previous:{title:"Architektur einer RAP-Anwendung",permalink:"/s4hana/documentation/rap/architecture"},next:{title:"Laufzeitartefakte einer RAP-Anwendung",permalink:"/s4hana/documentation/rap/runtime-artifacts"}},l={},d=[{value:"Struktur eines RAP BOs",id:"struktur-eines-rap-bos",level:2},{value:"Verhalten eines RAP BOs",id:"verhalten-eines-rap-bos",level:2},{value:"Verwenden von RAP BOs",id:"verwenden-von-rap-bos",level:2}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Ein RAP Business Object (RAP BO) bildet eine konrekte Entit\xe4t ab und stellt die transaktionale Logik dieser Entit\xe4t f\xfcr Fiori Elements Apps und Web APIs zur Verf\xfcgung.\nEin RAP BO besteht dabei aus einer ",(0,i.kt)("em",{parentName:"p"},"Data Definition"),", welche die Struktur des RAP BOs festlegt sowie einer ",(0,i.kt)("em",{parentName:"p"},"Behavior Definition"),", welche das transaktionale Verhalten festlegt."),(0,i.kt)("mermaid",{value:"flowchart LR\n  subgraph Business Object\n    data_definition(Data Definition)\n    behavior_definition(Behavior Definition)\n  end"}),(0,i.kt)("h2",{id:"struktur-eines-rap-bos"},"Struktur eines RAP BOs"),(0,i.kt)("p",null,"Ein RAP BO besteht immer aus einer Wurzelentit\xe4t und beliebig vielen Unterentit\xe4ten. Die Beziehung zwischen einer Kindentit\xe4t und der jeweiligen Elternentit\xe4t entspricht einer Komposition; die Beziehung selbst wird in Form spezieller Assoziationen abgebildet, wobei die entsprechende Join-Bedinung nur in der Kindentit\xe4t angegeben werden muss."),(0,i.kt)("p",null,"Im Beispiel stellt eine Flugverbindung die Wurzelentit\xe4t und ein Flug die Unterentit\xe4t dar. Die Beziehung zwischen der Flugverbindung und dem Flug entspricht dabei einer 1-n-Beziehung."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"define view entity ZR_FlightTP\n  as select from ZI_Flight\n  association to parent ZR_ConnectionTP as _Connection\n    on  $projection.CarrierId    = _Connection.CarrierId\n    and $projection.ConnectionId = _Connection.ConnectionId\n{\n  key CarrierId,\n  key ConnectionId,\n  key FlightDate,\n\n      Price,\n      CurrencyCode,\n\n      /* Associations */\n      _Connection\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"define root view entity ZR_ConnectionTP\n  as select from ZI_Connection\n  composition [0..*] of ZR_FlightTP as _Flights\n{\n  key CarrierId,\n  key ConnectionId,\n\n      AirportFromId,\n      AirportToId,\n\n      /* Associations */\n      _Flights\n}\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Die Wurzelentit\xe4t wird mit dem Schl\xfcsselwort ",(0,i.kt)("inlineCode",{parentName:"p"},"root")," kenntlich gemacht.")),(0,i.kt)("h2",{id:"verhalten-eines-rap-bos"},"Verhalten eines RAP BOs"),(0,i.kt)("p",null,"Eine ",(0,i.kt)("em",{parentName:"p"},"Behavior Definition")," besitzt f\xfcr jede Entit\xe4t des RAP BOs einen entsprechenden Abschnitt, in welchem das transaktionale Verhalten festgelegt werden kann:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Standard-Datenoperationen (Create, Update, Delete, Create By)"),(0,i.kt)("li",{parentName:"ul"},"Spezielle Operationen (Actions)"),(0,i.kt)("li",{parentName:"ul"},"Pr\xfcfungen (Validations)"),(0,i.kt)("li",{parentName:"ul"},"Berechnungen (Determinations)"),(0,i.kt)("li",{parentName:"ul"},"Sperren (Locks)"),(0,i.kt)("li",{parentName:"ul"},"Berechtigungspr\xfcfungen (Authority Checks)"),(0,i.kt)("li",{parentName:"ul"},"Feldkontrollen (Pflichtfelder, Anzeigefelder)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"managed implementation in class zbp_connectiontp unique;\nstrict ( 2 );\n\ndefine behavior for ZR_ConnectionTP alias Connection\npersistent table /dmo/connection\nlock master\nauthorization master ( instance )\n//etag master <field_name>\n{\n  create ( authorization : global );\n  update;\n  delete;\n  association _Flights { create; }\n\n  validation ValidateCarrierId on save { create; }\n  validation ValidateAirportIds on save { create; }\n\n  action AddFlight parameter ZA_Flight result [1] entity ZR_FLightTP;\n\n  field ( readonly ) CarrierId, ConnectionId;\n  field ( mandatory : create ) AirportFromId, AirportToId;\n  field ( readonly : update ) AirportFromId, AirportToId;\n\n  mapping for /dmo/connection corresponding\n    {\n      AirportFromId = airport_from_id;\n      AirportToId   = airport_to_id;\n      CarrierId     = carrier_id;\n      ConnectionId  = connection_id;\n    }\n}\n\ndefine behavior for ZR_FLightTP alias Flight\npersistent table /dmo/flight\nlock dependent by _Connection\nauthorization dependent by _Connection\n//etag master <field_name>\n{\n  update;\n  delete;\n  association _Connection;\n\n  field ( readonly ) CarrierId, ConnectionId, CurrencyCode, FlightDate;\n  field ( mandatory ) Price;\n\n  validation ValidatePrice on save { field Price; }\n  determination DetermineCurrencyCode on save { create; }\n\n  mapping for /dmo/flight corresponding\n    {\n      CarrierId    = carrier_id;\n      ConnectionId = connection_id;\n      CurrencyCode = currency_code;\n      FlightDate   = flight_date;\n    }\n}\n")),(0,i.kt)("h2",{id:"verwenden-von-rap-bos"},"Verwenden von RAP BOs"),(0,i.kt)("p",null,"Der Zugriff auf RAP BOs kann entweder \xfcber einen Gesch\xe4ftsservice oder \xfcber ABAP mit Hilfe der ",(0,i.kt)("em",{parentName:"p"},"Entity Manpipulation Lanaguage")," (EML) realisiert werden. Der Zugriff sollte dabei nicht direkt auf das BO, sondern \xfcber\nBO Projections (bei Gesch\xe4ftsservices) bzw. BO Interfaces (bei EML) erfolgen. Der so erfolgte Zugriff auf das RAP BO erm\xf6glicht das Lesen, Erzeugen, \xc4ndern und L\xf6schen von Daten auf Datenbankebene."),(0,i.kt)("mermaid",{value:"flowchart\n  service(Business Service)\n  eml(EML)\n  subgraph Core Data Services\n    projection[BO Projection]\n    interface[BO Interface]\n    definition[BO Definition]\n  end\n\n  service --\x3e projection\n  eml --\x3e interface\n  projection --\x3e definition\n  interface --\x3e definition"}))}p.isMDXComponent=!0}}]);