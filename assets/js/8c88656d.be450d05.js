"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[7144],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},E=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),E=d(t),g=r,T=E["".concat(o,".").concat(g)]||E[g]||c[g]||i;return t?a.createElement(T,s(s({ref:n},m),{},{components:t})):a.createElement(T,s({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=E;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var d=2;d<i;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}E.displayName="MDXCreateElement"},6298:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={title:"13. Validierungen implementieren",description:"",sidebar_position:130},s=void 0,l={unversionedId:"rap-cookbook/implement-validations",id:"rap-cookbook/implement-validations",title:"13. Validierungen implementieren",description:"",source:"@site/docs/rap-cookbook/implement-validations.md",sourceDirName:"rap-cookbook",slug:"/rap-cookbook/implement-validations",permalink:"/s4hana/rap-cookbook/implement-validations",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/rap-cookbook/implement-validations.md",tags:[],version:"current",sidebarPosition:130,frontMatter:{title:"13. Validierungen implementieren",description:"",sidebar_position:130},sidebar:"rapCookbookSidebar",previous:{title:"12. Statische Aktionen implementieren",permalink:"/s4hana/rap-cookbook/implement-static-actions"},next:{title:"14. Ermittlungen implementieren",permalink:"/s4hana/rap-cookbook/implement-determinations"}},o={},d=[{value:"Message Class <code>Z_TRAVEL</code>",id:"message-class-z_travel",level:2},{value:"Nachrichtenklasse <code>ZCM_TRAVEL</code>",id:"nachrichtenklasse-zcm_travel",level:2},{value:"Behavior Definition <code>ZR_TRAVEL</code>",id:"behavior-definition-zr_travel",level:2},{value:"Verhaltensimplementierung <code>ZBP_TRAVEL</code>",id:"verhaltensimplementierung-zbp_travel",level:2},{value:"Global Class <code>ZBP_TRAVEL</code>",id:"global-class-zbp_travel",level:3},{value:"Local Type <code>LHC_TRAVEL</code>",id:"local-type-lhc_travel",level:3}],m={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die Message Class ",(0,r.kt)("inlineCode",{parentName:"li"},"Z_TRAVEL")," um Nachrichten zur Validierung erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Nachrichtenklasse ",(0,r.kt)("inlineCode",{parentName:"li"},"ZCM_TRAVEL")," um Nachrichten zur Validierung erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Behavior Definition ",(0,r.kt)("inlineCode",{parentName:"li"},"ZR_TRAVEL")," um statische Feldkontrollen und Validierungen erweitern"),(0,r.kt)("li",{parentName:"ul"},"Die Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"li"},"ZBP_TRAVEL")," um Behandlermethoden zur Validierung erweitern")),(0,r.kt)("h2",{id:"message-class-z_travel"},"Message Class ",(0,r.kt)("inlineCode",{parentName:"h2"},"Z_TRAVEL")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Nachrichtennummer"),(0,r.kt)("th",{parentName:"tr",align:null},"Nachricht"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"001"),(0,r.kt)("td",{parentName:"tr",align:null},"This is a Test Message from &1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"002"),(0,r.kt)("td",{parentName:"tr",align:null},"No Agency found for Agency ID &1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"003"),(0,r.kt)("td",{parentName:"tr",align:null},"No Customer found for Customer ID &1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"004"),(0,r.kt)("td",{parentName:"tr",align:null},"Begin Date must be before End Date")))),(0,r.kt)("h2",{id:"nachrichtenklasse-zcm_travel"},"Nachrichtenklasse ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZCM_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZCM_TRAVEL.abap" showLineNumbers',title:'"ZCM_TRAVEL.abap"',showLineNumbers:!0},"CLASS zcm_travel DEFINITION PUBLIC\n  INHERITING FROM cx_static_check FINAL CREATE PUBLIC.\n\n  PUBLIC SECTION.\n    \" Interfaces\n    INTERFACES if_abap_behv_message.\n    INTERFACES if_t100_message.\n    INTERFACES if_t100_dyn_msg.\n\n    \" Message Constants\n    CONSTANTS:\n      BEGIN OF test_message,\n        msgid TYPE symsgid      VALUE 'Z_TRAVEL',\n        msgno TYPE symsgno      VALUE '001',\n        attr1 TYPE scx_attrname VALUE 'USER_NAME',\n        attr2 TYPE scx_attrname VALUE '',\n        attr3 TYPE scx_attrname VALUE '',\n        attr4 TYPE scx_attrname VALUE '',\n      END OF test_message.\n\n//highlight-start\n    CONSTANTS:\n      BEGIN OF no_agency_found,\n        msgid TYPE symsgid      VALUE 'Z_TRAVEL',\n        msgno TYPE symsgno      VALUE '002',\n        attr1 TYPE scx_attrname VALUE 'AGENCY_ID',\n        attr2 TYPE scx_attrname VALUE '',\n        attr3 TYPE scx_attrname VALUE '',\n        attr4 TYPE scx_attrname VALUE '',\n      END OF no_agency_found.\n\n    CONSTANTS:\n      BEGIN OF no_customer_found,\n        msgid TYPE symsgid      VALUE 'Z_TRAVEL',\n        msgno TYPE symsgno      VALUE '003',\n        attr1 TYPE scx_attrname VALUE 'CUSTOMER_ID',\n        attr2 TYPE scx_attrname VALUE '',\n        attr3 TYPE scx_attrname VALUE '',\n        attr4 TYPE scx_attrname VALUE '',\n      END OF no_customer_found.\n\n    CONSTANTS:\n      BEGIN OF invalid_dates,\n        msgid TYPE symsgid      VALUE 'Z_TRAVEL',\n        msgno TYPE symsgno      VALUE '004',\n        attr1 TYPE scx_attrname VALUE '',\n        attr2 TYPE scx_attrname VALUE '',\n        attr3 TYPE scx_attrname VALUE '',\n        attr4 TYPE scx_attrname VALUE '',\n      END OF invalid_dates.\n//highlight-end\n\n    \" Attributs\n    DATA user_name   TYPE syuname.\n//highlight-start\n    DATA agency_id   TYPE /dmo/agency_id.\n    DATA customer_id TYPE /dmo/customer_id.\n//highlight-end\n\n    \" Constructor\n    METHODS constructor\n      IMPORTING\n        severity     TYPE if_abap_behv_message=>t_severity DEFAULT if_abap_behv_message=>severity-error\n        textid       LIKE if_t100_message=>t100key         DEFAULT if_t100_message=>default_textid\n        !previous    LIKE previous                         OPTIONAL\n        user_name    TYPE syuname                          OPTIONAL\n//highlight-start\n        agency_id    TYPE /dmo/agency_id                   OPTIONAL\n        customer_id  TYPE /dmo/customer_id                 OPTIONAL.\n//highlight-end\n\n  PROTECTED SECTION.\n\n  PRIVATE SECTION.\n\nENDCLASS.\n\nCLASS zcm_travel IMPLEMENTATION.\n  METHOD constructor ##ADT_SUPPRESS_GENERATION.\n    super->constructor( previous = previous ).\n\n    if_t100_message~t100key = textid.\n    if_abap_behv_message~m_severity = severity.\n    me->user_name   = user_name.\n//highlight-start\n    me->agency_id   = agency_id.\n    me->customer_id = customer_id.\n//highlight-end\n  ENDMETHOD.\nENDCLASS.\n")),(0,r.kt)("h2",{id:"behavior-definition-zr_travel"},"Behavior Definition ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZR_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"showLineNumbers",showLineNumbers:!0},"managed implementation in class zbp_travel unique;\nstrict ( 2 );\n\ndefine behavior for ZR_Travel alias Travel\npersistent table z_travel_a\nlock master\nauthorization master ( instance )\n//etag master <field_name>\n{\n  create;\n  update;\n  delete;\n\n  association _Bookings { create; }\n\n  static action ShowTestMessage;\n\n//highlight-start\n  validation ValidateDates on save { create; }\n  validation ValidateCustomer on save { create; }\n  validation ValidateAgency on save { create; }\n//highlight-end\n\n  field ( readonly, numbering : managed ) TravelUuid;\n//highlight-start\n  field ( mandatory : create ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n  field ( readonly : update ) AgencyId, BeginDate, CustomerId, Description, EndDate;\n//highlight-end\n\n  mapping for z_travel_a corresponding\n  {\n    AgencyId = agency_id;\n    BeginDate = begin_date;\n    BookingFee = booking_fee;\n    CreatedAt = created_at;\n    CreatedBy = created_by;\n    CurrencyCode = currency_code;\n    CustomerId = customer_id;\n    Description = description;\n    EndDate = end_date;\n    LastChangedAt = last_changed_at;\n    LastChangedBy = last_changed_by;\n    Status = status;\n    TotalPrice = total_price;\n    TravelId = travel_id;\n    TravelUuid = travel_uuid;\n  }\n}\n\ndefine behavior for ZR_Booking alias Booking\npersistent table z_booking_a\nlock dependent by _Travel\nauthorization dependent by _Travel\n//etag master <field_name>\n{\n  update;\n  delete;\n\n  association _Travel;\n\n  field ( readonly, numbering : managed ) BookingUuid;\n  field ( readonly ) TravelUuid;\n\n  mapping for z_booking_a corresponding\n  {\n    BookingDate = booking_Date;\n    BookingId = booking_id;\n    BookingUuid = booking_uuid;\n    CarrierId = carrier_id;\n    ConnectionId = connection_id;\n    CurrencyCode = currency_code;\n    FlightDate = flight_date;\n    FlightPrice = flight_price;\n    TravelUuid = Travel_uuid;\n  }\n}\n")),(0,r.kt)("h2",{id:"verhaltensimplementierung-zbp_travel"},"Verhaltensimplementierung ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZBP_TRAVEL")),(0,r.kt)("h3",{id:"global-class-zbp_travel"},"Global Class ",(0,r.kt)("inlineCode",{parentName:"h3"},"ZBP_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" showLineNumbers',title:'"ZBP_TRAVEL.abap"',showLineNumbers:!0},"CLASS zbp_travel DEFINITION PUBLIC ABSTRACT FINAL FOR BEHAVIOR OF zr_travel.\n  PROTECTED SECTION.\n\n  PRIVATE SECTION.\nENDCLASS.\n\nCLASS zbp_travel IMPLEMENTATION.\nENDCLASS.\n")),(0,r.kt)("h3",{id:"local-type-lhc_travel"},"Local Type ",(0,r.kt)("inlineCode",{parentName:"h3"},"LHC_TRAVEL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-abap",metastring:'title="ZBP_TRAVEL.abap" shwoLineNumbers',title:'"ZBP_TRAVEL.abap"',shwoLineNumbers:!0},'CLASS lhc_travel DEFINITION INHERITING FROM cl_abap_behavior_handler.\n  PRIVATE SECTION.\n    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION\n      IMPORTING keys REQUEST requested_authorizations FOR Travel RESULT result.\n\n    METHODS showtestmessage FOR MODIFY\n      IMPORTING keys FOR ACTION travel~showtestmessage.\n\n//highlight-start\n    METHODS validateagency FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validateagency.\n//highlight-end\n\n//highlight-start\n    METHODS validatecustomer FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validatecustomer.\n//highlight-end\n\n//highlight-start\n    METHODS validatedates FOR VALIDATE ON SAVE\n      IMPORTING keys FOR travel~validatedates.\n//highlight-end\nENDCLASS.\n\nCLASS lhc_travel IMPLEMENTATION.\n  METHOD get_instance_authorizations.\n  ENDMETHOD.\n\n  METHOD showtestmessage.\n    DATA message TYPE REF TO zcm_travel.\n\n    message = NEW zcm_travel( severity  = if_abap_behv_message=>severity-success\n                              textid    = zcm_travel=>test_message\n                              user_name = sy-uname ).\n\n    APPEND message TO reported-%other.\n  ENDMETHOD.\n\n//highlight-start\n  METHOD validateagency.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( AgencyId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/agency FIELDS @abap_true WHERE agency_id = @travel-AgencyId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid    = zcm_travel=>no_agency_found\n                                  agency_id = travel-AgencyId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( AgencyId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n//highlight-end\n\n//highlight-start\n  METHOD validatecustomer.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( CustomerId )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n      " Validate Agency and Create Error Message\n      SELECT SINGLE FROM /dmo/customer FIELDS @abap_true WHERE customer_id = @travel-CustomerId INTO @DATA(exists).\n      IF exists = abap_false.\n        message = NEW zcm_travel( textid      = zcm_travel=>no_customer_found\n                                  customer_id = travel-CustomerId ).\n        APPEND VALUE #( %tky     = travel-%tky\n                        %element = VALUE #( CustomerId = if_abap_behv=>mk-on )\n                        %msg     = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n//highlight-end\n\n//highlight-start\n  METHOD validatedates.\n    DATA message TYPE REF TO zcm_travel.\n\n    " Read Travels\n    READ ENTITY IN LOCAL MODE ZR_Travel\n         FIELDS ( BeginDate EndDate )\n         WITH CORRESPONDING #( keys )\n         RESULT DATA(travels).\n\n    " Process Travels\n    LOOP AT travels INTO DATA(travel).\n      " Validate Dates and Create Error Message\n      IF travel-EndDate < travel-BeginDate.\n        message = NEW zcm_travel( textid = zcm_travel=>invalid_dates ).\n        APPEND VALUE #( %tky = travel-%tky\n                        %msg = message ) TO reported-travel.\n        APPEND VALUE #( %tky = travel-%tky ) TO failed-travel.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\n//highlight-end\nENDCLASS.\n')))}c.isMDXComponent=!0}}]);