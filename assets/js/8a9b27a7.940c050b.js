"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[5996],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),f=i,b=d["".concat(c,".").concat(f)]||d[f]||l[f]||r;return t?a.createElement(b,o(o({ref:n},p),{},{components:t})):a.createElement(b,o({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6881:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=t(7462),i=(t(7294),t(3905));const r={title:"Eingebaute Funktionen",description:"",sidebar_position:60,tags:[]},o=void 0,s={unversionedId:"abap-cds/documentation/built-in-functions",id:"abap-cds/documentation/built-in-functions",title:"Eingebaute Funktionen",description:"",source:"@site/docs/abap-cds/documentation/built-in-functions.md",sourceDirName:"abap-cds/documentation",slug:"/abap-cds/documentation/built-in-functions",permalink:"/s4hana/abap-cds/documentation/built-in-functions",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/abap-cds/documentation/built-in-functions.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Eingebaute Funktionen",description:"",sidebar_position:60,tags:[]},sidebar:"abapCDSSidebar",previous:{title:"Aggregatfunktionen",permalink:"/s4hana/abap-cds/documentation/aggregat-functions"},next:{title:"Assoziationen",permalink:"/s4hana/abap-cds/documentation/associations"}},c={},u=[],p={toc:u};function l(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Die ABAP CDS stellen verschiedene numerische Funktionen, Zeichenkettenfunktionen, Funktionen zur W\xe4hrungs- und Einheitenumrechnung sowie Datums- und Zeitfunktionen zur Verf\xfcgung."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"@AbapCatalog.sqlViewName: 'ABAPCDSVIEW'\n@AbapCatalog.compiler.compareFilter: true\n@AbapCatalog.preserveKey: true\n@AccessControl.authorizationCheck: #CHECK\n@EndUserText.label: 'ABAP CDS View'\ndefine view AbapCdsView\n  as select from sflight\n    inner join   spfli on  sflight.carrid = spfli.carrid\n                       and sflight.connid = spfli.connid\n{\n  /*\n   * Numerische Funktionen\n   */\n  5.0 / 3.0                                                as Fltp1,\n  div(5, 3)                                                as Div1,\n  mod(5, 3)                                                as Mod1,\n  division(5, 3, 2)                                        as Division1,\n  price                                                    as Price,\n  round(price, -2)                                         as RoundedPrice,\n  fltp_to_dec(1.43565 as abap.dec(16,2))                   as FltpToDec1,\n  /*\n   * Zeichenkettenfunktionen\n   */\n  concat_with_space('Hallo', 'Welt', 1)                    as ConcatWithSpace1,\n  planetype                                                as Planetype,\n  replace(replace(planetype, 'A', 'B'), '600', '400')      as ReplacedPlanetype,\n  /*\n   * W\xe4hrungs- und Einheitenumrechnung\n   */\n  distance                                                 as OldDistance,\n  distid                                                   as OldDistanceUnit,\n  @Semantics.quantity.unitOfMeasure: 'ConvertedDistanceUnit'\n  unit_conversion(\n    quantity => distance,\n    source_unit => distid,\n    target_unit => cast('KM' as abap.unit) )               as ConvertedDistance,\n  cast('KM' as abap.unit)                                  as ConvertedDistanceUnit,\n  /*\n   * Datums- und Zeitfunktionen\n   */\n  dats_add_days(cast('20211005' as abap.dats), 14, 'FAIL') as DatsAddDays\n}\n")))}l.isMDXComponent=!0}}]);