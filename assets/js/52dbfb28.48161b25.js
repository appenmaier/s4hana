"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[20],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=d(t),m=i,g=s["".concat(c,".").concat(m)]||s[m]||p[m]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=s;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},2776:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={title:"Verzweigungen und Fallunterscheidungen",description:"",sidebar_position:60,tags:[]},o=void 0,l={unversionedId:"documentation/abap/cases",id:"documentation/abap/cases",title:"Verzweigungen und Fallunterscheidungen",description:"",source:"@site/docs/documentation/abap/cases.md",sourceDirName:"documentation/abap",slug:"/documentation/abap/cases",permalink:"/s4hana/documentation/abap/cases",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/documentation/abap/cases.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Verzweigungen und Fallunterscheidungen",description:"",sidebar_position:60,tags:[]},sidebar:"documentationSidebar",previous:{title:"Zeichenketten und Zeichenketten-Templates",permalink:"/s4hana/documentation/abap/strings"},next:{title:"Schleifen",permalink:"/s4hana/documentation/abap/loops"}},c={},d=[{value:"Verzweigungen",id:"verzweigungen",level:2},{value:"Logische Operatoren und Vergleichsoperatoren",id:"logische-operatoren-und-vergleichsoperatoren",level:2},{value:"Fallunterscheidungen",id:"fallunterscheidungen",level:2}],u={toc:d};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"verzweigungen"},"Verzweigungen"),(0,i.kt)("p",null,"Verzweigungen k\xf6nnen in ABAP entweder mit ",(0,i.kt)("inlineCode",{parentName:"p"},"IF...ELSE...ENDIF")," oder dem Konstruktor-Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," realisiert werden. Dabei k\xf6nnen als Pr\xfcfbedingung beliebig komplexe logische Ausdr\xfccke angegeben werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA flight_date TYPE /dmo/flight_date VALUE '20230104'.\n\n\" IF...ELSE...ENDIF statement\nIF flight_date BETWEEN '20230101' AND '20231231'.\n  out->write( 'condition fulfilled' ).\nELSE.\n  out->write( 'condition not fulfilled' ).\nENDIF.\n\n\" COND operator\nout->write( COND #( WHEN flight_date BETWEEN '20230101' AND '20231231'\n                    THEN 'condition fulfilled'\n                    ELSE 'condition not fulfilled' ) ).\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Der ELSE-Zweig ist optional.")),(0,i.kt)("h2",{id:"logische-operatoren-und-vergleichsoperatoren"},"Logische Operatoren und Vergleichsoperatoren"),(0,i.kt)("p",null,"In ABAP sind beliebig tief geschachtelte Ausdr\xfccke m\xf6glich. Die Verarbeitungsreihenfolge folgt dabei den herk\xf6mmlichen algebraischen und aussagenlogischen Regeln."),(0,i.kt)("p",null,"Die logische Und-Verkn\xfcpfung wird in ABAP durch den Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"AND"),", die logische Oder-Verkn\xfcpfung durch den Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"OR")," und die logische Verneinung durch den Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"NOT")," realisiert. Als Vergleichsoperatoren stehen ",(0,i.kt)("inlineCode",{parentName:"p"},"="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,i.kt)("inlineCode",{parentName:"p"},">"),", ",(0,i.kt)("inlineCode",{parentName:"p"},">=")," und ",(0,i.kt)("inlineCode",{parentName:"p"},"BETWEEN")," zur\nVerf\xfcgung. Zus\xe4tzlich k\xf6nnen die Abfragen ",(0,i.kt)("inlineCode",{parentName:"p"},"IS INITIAL")," und ",(0,i.kt)("inlineCode",{parentName:"p"},"IS NOT INITAL")," sowie die Abfrage ",(0,i.kt)("inlineCode",{parentName:"p"},"BETWEEN...AND")," verwendet werden."),(0,i.kt)("h2",{id:"fallunterscheidungen"},"Fallunterscheidungen"),(0,i.kt)("p",null,"Fallunterscheidungen k\xf6nnen entweder mit verschachtelten Verzweiungen, mit ",(0,i.kt)("inlineCode",{parentName:"p"},"CASE...WHEN...ENDCASE")," oder mit dem Konstruktor-Operator ",(0,i.kt)("inlineCode",{parentName:"p"},"SWITCH")," realisiert werden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap",metastring:"showLineNumbers",showLineNumbers:!0},"DATA carrier_id TYPE /dmo/carrier_id VALUE 'LH'.\n\n\" IF...ELSE....ENDIF statement\nIF carrier_id = 'LH' OR carrier_id = 'lh' OR carrier_id = 'Lh' OR carrier_id = 'lH'.\n  out->write( 'Lufthansa' ).\nELSEIF carrier_id = 'AA' OR carrier_id = 'aa' OR carrier_id = 'Aa' OR carrier_id = 'aA'.\n  out->write( 'American Airlines' ).\nELSE.\n  out->write( carrier_id ).\nENDIF.\n\n\" CASE...WHEN...ENDCASE statement\nCASE carrier_id.\n  WHEN 'LH' OR 'lh' OR 'Lh' OR 'lH'.\n    out->write( 'Lufthansa' ).\n  WHEN 'AA' OR 'aa' OR 'Aa' OR 'aA'.\n    out->write( 'American Airlines' ).\n  WHEN OTHERS.\n    out->write( carrier_id ).\nENDCASE.\n\n\" SWITCH operator\nout->write( SWITCH #( carrier_id\n                      WHEN 'LH' OR 'lh' OR 'Lh' OR 'lH' THEN 'Lufthansa'\n                      WHEN 'AA' OR 'aa' OR 'Aa' OR 'aA' THEN 'American Airlines'\n                      ELSE                                   carrier_id ) ).\n")))}p.isMDXComponent=!0}}]);