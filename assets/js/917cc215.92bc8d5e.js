"use strict";(self.webpackChunkabap=self.webpackChunkabap||[]).push([[9440],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),b=i,m=p["".concat(o,".").concat(b)]||p[b]||u[b]||r;return t?a.createElement(m,l(l({ref:n},c),{},{components:t})):a.createElement(m,l({ref:n},c))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},468:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const r={title:"Datenbankzugriffe mit Open SQL",description:"",sidebar_position:120,tags:[]},l=void 0,s={unversionedId:"abap/documentation/open-sql",id:"abap/documentation/open-sql",title:"Datenbankzugriffe mit Open SQL",description:"",source:"@site/docs/abap/documentation/open-sql.md",sourceDirName:"abap/documentation",slug:"/abap/documentation/open-sql",permalink:"/s4hana/abap/documentation/open-sql",draft:!1,editUrl:"https://github.com/appenmaier/s4hana/tree/main/docs/abap/documentation/open-sql.md",tags:[],version:"current",sidebarPosition:120,frontMatter:{title:"Datenbankzugriffe mit Open SQL",description:"",sidebar_position:120,tags:[]},sidebar:"abapSidebar",previous:{title:"Interne Tabellen",permalink:"/s4hana/abap/documentation/internal-tables"},next:{title:"\xdcbungsaufgaben",permalink:"/s4hana/abap/exercises/"}},o={},d=[{value:"Transparente Tabellen",id:"transparente-tabellen",level:2},{value:"Lesende Datenbankzugriffe",id:"lesende-datenbankzugriffe",level:2},{value:"Definition der Zielvariablen",id:"definition-der-zielvariablen",level:2},{value:"Schreibende Datenbankzugriffe",id:"schreibende-datenbankzugriffe",level:2}],c={toc:d};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Die Structured Query Language (SQL) stellt die erste Wahl dar, wenn es um den Zugriff auf Datenbanken-Verwaltungssysteme (DBMS) geht. SQL umfasst die 3 Untersprachen DDL (Data Definition Language), DML (Data Manipulation Language) und DCL (Data Control Language). DDL wird zum Erzeugen und Verwalten von Datenbanktabellen und Views, DML zum Lesen und \xc4ndern von Datenbanktabellen-Inhalten und DCL zum Festlegen von Zugriffsberechtigungen verwendet. Obwohl SQL gr\xf6\xdftenteils standardisiert ist, besitzt jede Datenbank einen eigenen SQL-Dialekt mit datenbankspezifischen Eigenheiten. ABAP verwendet das datenbankunabh\xe4ngige Open SQL, welches vom Datenbankverwaltungssystem dynamisch in natives SQL umgesetzt wird."),(0,i.kt)("admonition",{title:"Hinweis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Open SQL umfasst lediglich Sprachelemente aus dem Bereich DML.")),(0,i.kt)("h2",{id:"transparente-tabellen"},"Transparente Tabellen"),(0,i.kt)("p",null,"Eine transparente Tabelle stellt eine plattformunabh\xe4ngige Beschreibung einer Datenbanktabelle dar. Bei der Aktivierung einer transparenten Tabelle in der System Library wird automatisch eine entsprechende Datenbanktabelle erzeugt."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/210174452-64c2e0e9-3d52-4d1c-ab0d-2e88e55a8a53.png",alt:"image"})),(0,i.kt)("admonition",{title:"Hinweis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Transparente Tabellen k\xf6nnen bei der Programmierung wie Strukturtypen verwendet werden.")),(0,i.kt)("h2",{id:"lesende-datenbankzugriffe"},"Lesende Datenbankzugriffe"),(0,i.kt)("p",null,"Lesende Datenbankzugriffe werden mit Hilfe der Anweisung ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," umgesetzt:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Die FROM-Klausel benennt die Datenquelle (Datenbanktabelle oder View)"),(0,i.kt)("li",{parentName:"ul"},"Die FIELDS-Klausel beschreibt, welche Felder gelesen werden sollen"),(0,i.kt)("li",{parentName:"ul"},"Die WHERE-Klausel legt die zu selektierenden Zeilen fest"),(0,i.kt)("li",{parentName:"ul"},"Die INTO-Klausel definiert, wohin die selektierten Daten geschrieben werden sollen")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/210174652-87cc7d3f-e9e4-4d69-8a95-6a4e68e3e0b9.png",alt:"image"})),(0,i.kt)("p",null,"Mit der Anweisung ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT SINGLE")," wird ein einzelner Datensatz gelesen, mit dem Zusatz ",(0,i.kt)("inlineCode",{parentName:"p"},"INTO TABLE")," k\xf6nnen mehrere Zeilen einer Datenbanktabelle oder einer View direkt als Block in eine interne Tabelle kopiert werden (Array Fetch). Um einen eindeutigen Zugriff\nzu gew\xe4hrleisten, m\xfcssen dabei alle Schl\xfcsselfelder in der WHERE-Klausel angegeben werden (Ausnahme: Mandant)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap"},"DATA carrier_id TYPE s_carr_id VALUE 'LH' .\nDATA connection_id TYPE s_conn_id VALUE '0400'.\nDATA connection TYPE spfli.\nDATA connections TYPE TABLE OF spfli.\n\n* Lesen eines Einzelsatzes\nSELECT SINGLE FROM spfli FIELDS * WHERE carrid = @carrier_id\n AND connid = @connection_id INTO @connection.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n\n* Lesen mehrerer Datens\xe4tze\nSELECT FROM spfli FIELDS * WHERE carrid = @carrier_id INTO TABLE @connections.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Mit dem optionalen Zusatz ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER BY")," k\xf6nnen die gelesenen Datens\xe4tze sortiert werden.")),(0,i.kt)("h2",{id:"definition-der-zielvariablen"},"Definition der Zielvariablen"),(0,i.kt)("p",null,"Bei Selektion von bestimmten Feldern muss in der INTO-Klausel eine Variable gew\xe4hlt werden, die den gleichen Aufbau wie die Feldliste besitzt. Der Zusatz ",(0,i.kt)("inlineCode",{parentName:"p"},"CORRESPONDING FIELDS OF")," der INTO-Klausel bewirkt, dass nur gleichnamige Felder der Zielvariable bef\xfcllt\nwerden."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap"},"DATA connection TYPE connection.\n\n* Angabe passender Felder\nSELECT SINGLE FROM spfli FIELDS carrid, connid INTO @connection.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n\n* Kopieren namensgleicher Felder\nSELECT SINGLE FROM spfli FIELDS * INTO CORRESPONDING FIELDS OF @connection.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n\n* Inlinedeklaration\nSELECT SINGLE FROM spfli FIELDS * INTO @DATA(connection2).\nIF sy-subrc <> 0.\n  ...\nENDIF.\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Bei nicht \xfcbereinstimmenden Feldtypen wird eine (aufw\xe4ndige) Typkonvertierung durchgef\xfchrt.")),(0,i.kt)("h2",{id:"schreibende-datenbankzugriffe"},"Schreibende Datenbankzugriffe"),(0,i.kt)("p",null,"F\xfcr schreibende Datenbankzugriffe stellt ABAP die Anweisungen ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," (Hinzuf\xfcgen), ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," (\xc4ndern) sowie ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE")," (L\xf6schen) zur Verf\xfcgung."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-abap"},"DATA connection TYPE spfli.\n\nconnection-mandt = sy-mandt.\nconnection-carrid = 'LH'.\nconnection-connid = '0400'.\nconnection-cityfrom = 'FRANKFURT'.\nconnection-cityto = 'NEW YORK'.\n\n* Hinzuf\xfcgen eines Datensatzes\nINSERT spfli FROM @connection.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n\n* \xc4ndern eines Datensatzes\nUPDATE spfli FROM @connection.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n\n* L\xf6sches eines Datensatzes\nDELETE spfli FROM @connection.\nIF sy-subrc <> 0.\n  ...\nENDIF.\n")))}u.isMDXComponent=!0}}]);